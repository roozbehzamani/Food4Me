//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace MainEnterpriseProject.API_SendSMS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SendReceiveSoap", Namespace="http://tempuri.org/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ParentModel))]
    public partial class SendReceive : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetSMSLinesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveNewSchedulSendSms_DailyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListOfScheduleSendsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveNewSchedulSendSms_MonthlyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSendToBranchesSendMethodsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBranchesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSendToBranchFilterConditionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendToParishOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendToParishWithBatchkeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveNewSchedulSendSms_WeeklyOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteSchedulSendSmsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSentMessageStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSentMessageStatusByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSentMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReceivedMessageByLastMessageIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReceivedMessageByLastMessageIDAndLineNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReceivedMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTrashedMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCurrentDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserCreditOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDefualtLineNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageCustomerClubOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageToOneCustomerClubOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendBulkMessageToCustomersClubOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageToCustomersClubCategoriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageToCustomersClubCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback VipSendMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback VipSendMessageWithBachKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVipSentMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVipSentMessageStatusByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVipSentMessageStatusByIDWithDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVipSentMessageStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback VipSendMessageWithLineNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback VipSendMessageWithLineNumberAndBatchKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveVIP_SendCorespondentMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback WindowsService_SendAutomaticSMSOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageWithLineNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendBulkMessageWithLineNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendBulkMessageWithLineNumberAndBatchKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageWithLineNumberAndBatchKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageWithBachKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSmartOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendSmartMadiranOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveReceiveMessagesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SendReceive() {
            this.Url = global::MainEnterpriseProject.Properties.Settings.Default.MainEnterpriseProject_API_SendSMS_SendReceive;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetSMSLinesCompletedEventHandler GetSMSLinesCompleted;
        
        /// <remarks/>
        public event SaveNewSchedulSendSms_DailyCompletedEventHandler SaveNewSchedulSendSms_DailyCompleted;
        
        /// <remarks/>
        public event GetListOfScheduleSendsCompletedEventHandler GetListOfScheduleSendsCompleted;
        
        /// <remarks/>
        public event SaveNewSchedulSendSms_MonthlyCompletedEventHandler SaveNewSchedulSendSms_MonthlyCompleted;
        
        /// <remarks/>
        public event GetSendToBranchesSendMethodsCompletedEventHandler GetSendToBranchesSendMethodsCompleted;
        
        /// <remarks/>
        public event GetBranchesCompletedEventHandler GetBranchesCompleted;
        
        /// <remarks/>
        public event GetSendToBranchFilterConditionsCompletedEventHandler GetSendToBranchFilterConditionsCompleted;
        
        /// <remarks/>
        public event SendToParishCompletedEventHandler SendToParishCompleted;
        
        /// <remarks/>
        public event SendToParishWithBatchkeyCompletedEventHandler SendToParishWithBatchkeyCompleted;
        
        /// <remarks/>
        public event SaveNewSchedulSendSms_WeeklyCompletedEventHandler SaveNewSchedulSendSms_WeeklyCompleted;
        
        /// <remarks/>
        public event DeleteSchedulSendSmsCompletedEventHandler DeleteSchedulSendSmsCompleted;
        
        /// <remarks/>
        public event GetSentMessageStatusCompletedEventHandler GetSentMessageStatusCompleted;
        
        /// <remarks/>
        public event GetSentMessageStatusByIDCompletedEventHandler GetSentMessageStatusByIDCompleted;
        
        /// <remarks/>
        public event GetSentMessagesCompletedEventHandler GetSentMessagesCompleted;
        
        /// <remarks/>
        public event GetReceivedMessageByLastMessageIDCompletedEventHandler GetReceivedMessageByLastMessageIDCompleted;
        
        /// <remarks/>
        public event GetReceivedMessageByLastMessageIDAndLineNumberCompletedEventHandler GetReceivedMessageByLastMessageIDAndLineNumberCompleted;
        
        /// <remarks/>
        public event GetReceivedMessagesCompletedEventHandler GetReceivedMessagesCompleted;
        
        /// <remarks/>
        public event GetAllMessagesCompletedEventHandler GetAllMessagesCompleted;
        
        /// <remarks/>
        public event GetTrashedMessagesCompletedEventHandler GetTrashedMessagesCompleted;
        
        /// <remarks/>
        public event GetCurrentDateCompletedEventHandler GetCurrentDateCompleted;
        
        /// <remarks/>
        public event GetUserCreditCompletedEventHandler GetUserCreditCompleted;
        
        /// <remarks/>
        public event GetDefualtLineNumberCompletedEventHandler GetDefualtLineNumberCompleted;
        
        /// <remarks/>
        public event SendMessageCustomerClubCompletedEventHandler SendMessageCustomerClubCompleted;
        
        /// <remarks/>
        public event SendMessageToOneCustomerClubCompletedEventHandler SendMessageToOneCustomerClubCompleted;
        
        /// <remarks/>
        public event SendBulkMessageToCustomersClubCompletedEventHandler SendBulkMessageToCustomersClubCompleted;
        
        /// <remarks/>
        public event SendMessageToCustomersClubCategoriesCompletedEventHandler SendMessageToCustomersClubCategoriesCompleted;
        
        /// <remarks/>
        public event SendMessageToCustomersClubCategoryCompletedEventHandler SendMessageToCustomersClubCategoryCompleted;
        
        /// <remarks/>
        public event VipSendMessagesCompletedEventHandler VipSendMessagesCompleted;
        
        /// <remarks/>
        public event VipSendMessageWithBachKeyCompletedEventHandler VipSendMessageWithBachKeyCompleted;
        
        /// <remarks/>
        public event GetVipSentMessagesCompletedEventHandler GetVipSentMessagesCompleted;
        
        /// <remarks/>
        public event GetVipSentMessageStatusByIDCompletedEventHandler GetVipSentMessageStatusByIDCompleted;
        
        /// <remarks/>
        public event GetVipSentMessageStatusByIDWithDateCompletedEventHandler GetVipSentMessageStatusByIDWithDateCompleted;
        
        /// <remarks/>
        public event GetVipSentMessageStatusCompletedEventHandler GetVipSentMessageStatusCompleted;
        
        /// <remarks/>
        public event VipSendMessageWithLineNumberCompletedEventHandler VipSendMessageWithLineNumberCompleted;
        
        /// <remarks/>
        public event VipSendMessageWithLineNumberAndBatchKeyCompletedEventHandler VipSendMessageWithLineNumberAndBatchKeyCompleted;
        
        /// <remarks/>
        public event SaveVIP_SendCorespondentMessageCompletedEventHandler SaveVIP_SendCorespondentMessageCompleted;
        
        /// <remarks/>
        public event WindowsService_SendAutomaticSMSCompletedEventHandler WindowsService_SendAutomaticSMSCompleted;
        
        /// <remarks/>
        public event SendMessageWithLineNumberCompletedEventHandler SendMessageWithLineNumberCompleted;
        
        /// <remarks/>
        public event SendBulkMessageWithLineNumberCompletedEventHandler SendBulkMessageWithLineNumberCompleted;
        
        /// <remarks/>
        public event SendBulkMessageWithLineNumberAndBatchKeyCompletedEventHandler SendBulkMessageWithLineNumberAndBatchKeyCompleted;
        
        /// <remarks/>
        public event SendMessageWithLineNumberAndBatchKeyCompletedEventHandler SendMessageWithLineNumberAndBatchKeyCompleted;
        
        /// <remarks/>
        public event SendMessageCompletedEventHandler SendMessageCompleted;
        
        /// <remarks/>
        public event SendMessageWithBachKeyCompletedEventHandler SendMessageWithBachKeyCompleted;
        
        /// <remarks/>
        public event SendSmartCompletedEventHandler SendSmartCompleted;
        
        /// <remarks/>
        public event SendSmartMadiranCompletedEventHandler SendSmartMadiranCompleted;
        
        /// <remarks/>
        public event SaveReceiveMessagesCompletedEventHandler SaveReceiveMessagesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSMSLines", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SMSLineNumber[] GetSMSLines(string userName, string password, ref string message) {
            object[] results = this.Invoke("GetSMSLines", new object[] {
                        userName,
                        password,
                        message});
            message = ((string)(results[1]));
            return ((SMSLineNumber[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSMSLinesAsync(string userName, string password, string message) {
            this.GetSMSLinesAsync(userName, password, message, null);
        }
        
        /// <remarks/>
        public void GetSMSLinesAsync(string userName, string password, string message, object userState) {
            if ((this.GetSMSLinesOperationCompleted == null)) {
                this.GetSMSLinesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSMSLinesOperationCompleted);
            }
            this.InvokeAsync("GetSMSLines", new object[] {
                        userName,
                        password,
                        message}, this.GetSMSLinesOperationCompleted, userState);
        }
        
        private void OnGetSMSLinesOperationCompleted(object arg) {
            if ((this.GetSMSLinesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSMSLinesCompleted(this, new GetSMSLinesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveNewSchedulSendSms_Daily", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long SaveNewSchedulSendSms_Daily(string userName, string password, ScheduleSend_Daily dailyScheduleSend, ref string message) {
            object[] results = this.Invoke("SaveNewSchedulSendSms_Daily", new object[] {
                        userName,
                        password,
                        dailyScheduleSend,
                        message});
            message = ((string)(results[1]));
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void SaveNewSchedulSendSms_DailyAsync(string userName, string password, ScheduleSend_Daily dailyScheduleSend, string message) {
            this.SaveNewSchedulSendSms_DailyAsync(userName, password, dailyScheduleSend, message, null);
        }
        
        /// <remarks/>
        public void SaveNewSchedulSendSms_DailyAsync(string userName, string password, ScheduleSend_Daily dailyScheduleSend, string message, object userState) {
            if ((this.SaveNewSchedulSendSms_DailyOperationCompleted == null)) {
                this.SaveNewSchedulSendSms_DailyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveNewSchedulSendSms_DailyOperationCompleted);
            }
            this.InvokeAsync("SaveNewSchedulSendSms_Daily", new object[] {
                        userName,
                        password,
                        dailyScheduleSend,
                        message}, this.SaveNewSchedulSendSms_DailyOperationCompleted, userState);
        }
        
        private void OnSaveNewSchedulSendSms_DailyOperationCompleted(object arg) {
            if ((this.SaveNewSchedulSendSms_DailyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveNewSchedulSendSms_DailyCompleted(this, new SaveNewSchedulSendSms_DailyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListOfScheduleSends", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ScheduleSend[] GetListOfScheduleSends(string userName, string password, ref string message) {
            object[] results = this.Invoke("GetListOfScheduleSends", new object[] {
                        userName,
                        password,
                        message});
            message = ((string)(results[1]));
            return ((ScheduleSend[])(results[0]));
        }
        
        /// <remarks/>
        public void GetListOfScheduleSendsAsync(string userName, string password, string message) {
            this.GetListOfScheduleSendsAsync(userName, password, message, null);
        }
        
        /// <remarks/>
        public void GetListOfScheduleSendsAsync(string userName, string password, string message, object userState) {
            if ((this.GetListOfScheduleSendsOperationCompleted == null)) {
                this.GetListOfScheduleSendsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListOfScheduleSendsOperationCompleted);
            }
            this.InvokeAsync("GetListOfScheduleSends", new object[] {
                        userName,
                        password,
                        message}, this.GetListOfScheduleSendsOperationCompleted, userState);
        }
        
        private void OnGetListOfScheduleSendsOperationCompleted(object arg) {
            if ((this.GetListOfScheduleSendsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListOfScheduleSendsCompleted(this, new GetListOfScheduleSendsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveNewSchedulSendSms_Monthly", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long SaveNewSchedulSendSms_Monthly(string userName, string password, ScheduleSend_Monthly monthlyScheduleSend, ref string message) {
            object[] results = this.Invoke("SaveNewSchedulSendSms_Monthly", new object[] {
                        userName,
                        password,
                        monthlyScheduleSend,
                        message});
            message = ((string)(results[1]));
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void SaveNewSchedulSendSms_MonthlyAsync(string userName, string password, ScheduleSend_Monthly monthlyScheduleSend, string message) {
            this.SaveNewSchedulSendSms_MonthlyAsync(userName, password, monthlyScheduleSend, message, null);
        }
        
        /// <remarks/>
        public void SaveNewSchedulSendSms_MonthlyAsync(string userName, string password, ScheduleSend_Monthly monthlyScheduleSend, string message, object userState) {
            if ((this.SaveNewSchedulSendSms_MonthlyOperationCompleted == null)) {
                this.SaveNewSchedulSendSms_MonthlyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveNewSchedulSendSms_MonthlyOperationCompleted);
            }
            this.InvokeAsync("SaveNewSchedulSendSms_Monthly", new object[] {
                        userName,
                        password,
                        monthlyScheduleSend,
                        message}, this.SaveNewSchedulSendSms_MonthlyOperationCompleted, userState);
        }
        
        private void OnSaveNewSchedulSendSms_MonthlyOperationCompleted(object arg) {
            if ((this.SaveNewSchedulSendSms_MonthlyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveNewSchedulSendSms_MonthlyCompleted(this, new SaveNewSchedulSendSms_MonthlyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSendToBranchesSendMethods", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SendToBranchSendMethod[] GetSendToBranchesSendMethods(string userName, string password, ref string message) {
            object[] results = this.Invoke("GetSendToBranchesSendMethods", new object[] {
                        userName,
                        password,
                        message});
            message = ((string)(results[1]));
            return ((SendToBranchSendMethod[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSendToBranchesSendMethodsAsync(string userName, string password, string message) {
            this.GetSendToBranchesSendMethodsAsync(userName, password, message, null);
        }
        
        /// <remarks/>
        public void GetSendToBranchesSendMethodsAsync(string userName, string password, string message, object userState) {
            if ((this.GetSendToBranchesSendMethodsOperationCompleted == null)) {
                this.GetSendToBranchesSendMethodsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSendToBranchesSendMethodsOperationCompleted);
            }
            this.InvokeAsync("GetSendToBranchesSendMethods", new object[] {
                        userName,
                        password,
                        message}, this.GetSendToBranchesSendMethodsOperationCompleted, userState);
        }
        
        private void OnGetSendToBranchesSendMethodsOperationCompleted(object arg) {
            if ((this.GetSendToBranchesSendMethodsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSendToBranchesSendMethodsCompleted(this, new GetSendToBranchesSendMethodsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBranches", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Branch[] GetBranches(string userName, string password, int parentBranchID, ref string message) {
            object[] results = this.Invoke("GetBranches", new object[] {
                        userName,
                        password,
                        parentBranchID,
                        message});
            message = ((string)(results[1]));
            return ((Branch[])(results[0]));
        }
        
        /// <remarks/>
        public void GetBranchesAsync(string userName, string password, int parentBranchID, string message) {
            this.GetBranchesAsync(userName, password, parentBranchID, message, null);
        }
        
        /// <remarks/>
        public void GetBranchesAsync(string userName, string password, int parentBranchID, string message, object userState) {
            if ((this.GetBranchesOperationCompleted == null)) {
                this.GetBranchesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBranchesOperationCompleted);
            }
            this.InvokeAsync("GetBranches", new object[] {
                        userName,
                        password,
                        parentBranchID,
                        message}, this.GetBranchesOperationCompleted, userState);
        }
        
        private void OnGetBranchesOperationCompleted(object arg) {
            if ((this.GetBranchesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBranchesCompleted(this, new GetBranchesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSendToBranchFilterConditions", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SendToBranchFilterConditions[] GetSendToBranchFilterConditions(string userName, string password, ref string message) {
            object[] results = this.Invoke("GetSendToBranchFilterConditions", new object[] {
                        userName,
                        password,
                        message});
            message = ((string)(results[1]));
            return ((SendToBranchFilterConditions[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSendToBranchFilterConditionsAsync(string userName, string password, string message) {
            this.GetSendToBranchFilterConditionsAsync(userName, password, message, null);
        }
        
        /// <remarks/>
        public void GetSendToBranchFilterConditionsAsync(string userName, string password, string message, object userState) {
            if ((this.GetSendToBranchFilterConditionsOperationCompleted == null)) {
                this.GetSendToBranchFilterConditionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSendToBranchFilterConditionsOperationCompleted);
            }
            this.InvokeAsync("GetSendToBranchFilterConditions", new object[] {
                        userName,
                        password,
                        message}, this.GetSendToBranchFilterConditionsOperationCompleted, userState);
        }
        
        private void OnGetSendToBranchFilterConditionsOperationCompleted(object arg) {
            if ((this.GetSendToBranchFilterConditionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSendToBranchFilterConditionsCompleted(this, new GetSendToBranchFilterConditionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendToParish", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SendToParish(string userName, string password, int smsLineID, int sendCount, int sendMethodID, int startAt, long fromNumber, long toNumber, int filterID, long filterValue, string messageBody, int parishID, System.DateTime sendSince, bool isFlash, ref string message) {
            object[] results = this.Invoke("SendToParish", new object[] {
                        userName,
                        password,
                        smsLineID,
                        sendCount,
                        sendMethodID,
                        startAt,
                        fromNumber,
                        toNumber,
                        filterID,
                        filterValue,
                        messageBody,
                        parishID,
                        sendSince,
                        isFlash,
                        message});
            message = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SendToParishAsync(string userName, string password, int smsLineID, int sendCount, int sendMethodID, int startAt, long fromNumber, long toNumber, int filterID, long filterValue, string messageBody, int parishID, System.DateTime sendSince, bool isFlash, string message) {
            this.SendToParishAsync(userName, password, smsLineID, sendCount, sendMethodID, startAt, fromNumber, toNumber, filterID, filterValue, messageBody, parishID, sendSince, isFlash, message, null);
        }
        
        /// <remarks/>
        public void SendToParishAsync(
                    string userName, 
                    string password, 
                    int smsLineID, 
                    int sendCount, 
                    int sendMethodID, 
                    int startAt, 
                    long fromNumber, 
                    long toNumber, 
                    int filterID, 
                    long filterValue, 
                    string messageBody, 
                    int parishID, 
                    System.DateTime sendSince, 
                    bool isFlash, 
                    string message, 
                    object userState) {
            if ((this.SendToParishOperationCompleted == null)) {
                this.SendToParishOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendToParishOperationCompleted);
            }
            this.InvokeAsync("SendToParish", new object[] {
                        userName,
                        password,
                        smsLineID,
                        sendCount,
                        sendMethodID,
                        startAt,
                        fromNumber,
                        toNumber,
                        filterID,
                        filterValue,
                        messageBody,
                        parishID,
                        sendSince,
                        isFlash,
                        message}, this.SendToParishOperationCompleted, userState);
        }
        
        private void OnSendToParishOperationCompleted(object arg) {
            if ((this.SendToParishCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendToParishCompleted(this, new SendToParishCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendToParishWithBatchkey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SendToParishWithBatchkey(
                    string userName, 
                    string password, 
                    int smsLineID, 
                    int sendCount, 
                    int sendMethodID, 
                    int startAt, 
                    long fromNumber, 
                    long toNumber, 
                    int filterID, 
                    long filterValue, 
                    string messageBody, 
                    int parishID, 
                    System.DateTime sendSince, 
                    bool isFlash, 
                    ref System.Guid batchkey, 
                    ref string message) {
            object[] results = this.Invoke("SendToParishWithBatchkey", new object[] {
                        userName,
                        password,
                        smsLineID,
                        sendCount,
                        sendMethodID,
                        startAt,
                        fromNumber,
                        toNumber,
                        filterID,
                        filterValue,
                        messageBody,
                        parishID,
                        sendSince,
                        isFlash,
                        batchkey,
                        message});
            batchkey = ((System.Guid)(results[1]));
            message = ((string)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SendToParishWithBatchkeyAsync(
                    string userName, 
                    string password, 
                    int smsLineID, 
                    int sendCount, 
                    int sendMethodID, 
                    int startAt, 
                    long fromNumber, 
                    long toNumber, 
                    int filterID, 
                    long filterValue, 
                    string messageBody, 
                    int parishID, 
                    System.DateTime sendSince, 
                    bool isFlash, 
                    System.Guid batchkey, 
                    string message) {
            this.SendToParishWithBatchkeyAsync(userName, password, smsLineID, sendCount, sendMethodID, startAt, fromNumber, toNumber, filterID, filterValue, messageBody, parishID, sendSince, isFlash, batchkey, message, null);
        }
        
        /// <remarks/>
        public void SendToParishWithBatchkeyAsync(
                    string userName, 
                    string password, 
                    int smsLineID, 
                    int sendCount, 
                    int sendMethodID, 
                    int startAt, 
                    long fromNumber, 
                    long toNumber, 
                    int filterID, 
                    long filterValue, 
                    string messageBody, 
                    int parishID, 
                    System.DateTime sendSince, 
                    bool isFlash, 
                    System.Guid batchkey, 
                    string message, 
                    object userState) {
            if ((this.SendToParishWithBatchkeyOperationCompleted == null)) {
                this.SendToParishWithBatchkeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendToParishWithBatchkeyOperationCompleted);
            }
            this.InvokeAsync("SendToParishWithBatchkey", new object[] {
                        userName,
                        password,
                        smsLineID,
                        sendCount,
                        sendMethodID,
                        startAt,
                        fromNumber,
                        toNumber,
                        filterID,
                        filterValue,
                        messageBody,
                        parishID,
                        sendSince,
                        isFlash,
                        batchkey,
                        message}, this.SendToParishWithBatchkeyOperationCompleted, userState);
        }
        
        private void OnSendToParishWithBatchkeyOperationCompleted(object arg) {
            if ((this.SendToParishWithBatchkeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendToParishWithBatchkeyCompleted(this, new SendToParishWithBatchkeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveNewSchedulSendSms_Weekly", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long SaveNewSchedulSendSms_Weekly(string userName, string password, ScheduleSend_Weekly weeklyScheduleSend, ref string message) {
            object[] results = this.Invoke("SaveNewSchedulSendSms_Weekly", new object[] {
                        userName,
                        password,
                        weeklyScheduleSend,
                        message});
            message = ((string)(results[1]));
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void SaveNewSchedulSendSms_WeeklyAsync(string userName, string password, ScheduleSend_Weekly weeklyScheduleSend, string message) {
            this.SaveNewSchedulSendSms_WeeklyAsync(userName, password, weeklyScheduleSend, message, null);
        }
        
        /// <remarks/>
        public void SaveNewSchedulSendSms_WeeklyAsync(string userName, string password, ScheduleSend_Weekly weeklyScheduleSend, string message, object userState) {
            if ((this.SaveNewSchedulSendSms_WeeklyOperationCompleted == null)) {
                this.SaveNewSchedulSendSms_WeeklyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveNewSchedulSendSms_WeeklyOperationCompleted);
            }
            this.InvokeAsync("SaveNewSchedulSendSms_Weekly", new object[] {
                        userName,
                        password,
                        weeklyScheduleSend,
                        message}, this.SaveNewSchedulSendSms_WeeklyOperationCompleted, userState);
        }
        
        private void OnSaveNewSchedulSendSms_WeeklyOperationCompleted(object arg) {
            if ((this.SaveNewSchedulSendSms_WeeklyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveNewSchedulSendSms_WeeklyCompleted(this, new SaveNewSchedulSendSms_WeeklyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteSchedulSendSms", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long DeleteSchedulSendSms(string userName, string password, int schedulSendSmsID, ref string message) {
            object[] results = this.Invoke("DeleteSchedulSendSms", new object[] {
                        userName,
                        password,
                        schedulSendSmsID,
                        message});
            message = ((string)(results[1]));
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteSchedulSendSmsAsync(string userName, string password, int schedulSendSmsID, string message) {
            this.DeleteSchedulSendSmsAsync(userName, password, schedulSendSmsID, message, null);
        }
        
        /// <remarks/>
        public void DeleteSchedulSendSmsAsync(string userName, string password, int schedulSendSmsID, string message, object userState) {
            if ((this.DeleteSchedulSendSmsOperationCompleted == null)) {
                this.DeleteSchedulSendSmsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSchedulSendSmsOperationCompleted);
            }
            this.InvokeAsync("DeleteSchedulSendSms", new object[] {
                        userName,
                        password,
                        schedulSendSmsID,
                        message}, this.DeleteSchedulSendSmsOperationCompleted, userState);
        }
        
        private void OnDeleteSchedulSendSmsOperationCompleted(object arg) {
            if ((this.DeleteSchedulSendSmsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSchedulSendSmsCompleted(this, new DeleteSchedulSendSmsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSentMessageStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SentSmsDetails[] GetSentMessageStatus(string userName, string password, System.Guid batchKey, System.DateTime sendDateTime, int requestedPageNumber, int rowsPerPage, ref int countOfAll, ref string message) {
            object[] results = this.Invoke("GetSentMessageStatus", new object[] {
                        userName,
                        password,
                        batchKey,
                        sendDateTime,
                        requestedPageNumber,
                        rowsPerPage,
                        countOfAll,
                        message});
            countOfAll = ((int)(results[1]));
            message = ((string)(results[2]));
            return ((SentSmsDetails[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSentMessageStatusAsync(string userName, string password, System.Guid batchKey, System.DateTime sendDateTime, int requestedPageNumber, int rowsPerPage, int countOfAll, string message) {
            this.GetSentMessageStatusAsync(userName, password, batchKey, sendDateTime, requestedPageNumber, rowsPerPage, countOfAll, message, null);
        }
        
        /// <remarks/>
        public void GetSentMessageStatusAsync(string userName, string password, System.Guid batchKey, System.DateTime sendDateTime, int requestedPageNumber, int rowsPerPage, int countOfAll, string message, object userState) {
            if ((this.GetSentMessageStatusOperationCompleted == null)) {
                this.GetSentMessageStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSentMessageStatusOperationCompleted);
            }
            this.InvokeAsync("GetSentMessageStatus", new object[] {
                        userName,
                        password,
                        batchKey,
                        sendDateTime,
                        requestedPageNumber,
                        rowsPerPage,
                        countOfAll,
                        message}, this.GetSentMessageStatusOperationCompleted, userState);
        }
        
        private void OnGetSentMessageStatusOperationCompleted(object arg) {
            if ((this.GetSentMessageStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSentMessageStatusCompleted(this, new GetSentMessageStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSentMessageStatusByID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SentSmsDetails GetSentMessageStatusByID(string userName, string password, long messageID, ref string message) {
            object[] results = this.Invoke("GetSentMessageStatusByID", new object[] {
                        userName,
                        password,
                        messageID,
                        message});
            message = ((string)(results[1]));
            return ((SentSmsDetails)(results[0]));
        }
        
        /// <remarks/>
        public void GetSentMessageStatusByIDAsync(string userName, string password, long messageID, string message) {
            this.GetSentMessageStatusByIDAsync(userName, password, messageID, message, null);
        }
        
        /// <remarks/>
        public void GetSentMessageStatusByIDAsync(string userName, string password, long messageID, string message, object userState) {
            if ((this.GetSentMessageStatusByIDOperationCompleted == null)) {
                this.GetSentMessageStatusByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSentMessageStatusByIDOperationCompleted);
            }
            this.InvokeAsync("GetSentMessageStatusByID", new object[] {
                        userName,
                        password,
                        messageID,
                        message}, this.GetSentMessageStatusByIDOperationCompleted, userState);
        }
        
        private void OnGetSentMessageStatusByIDOperationCompleted(object arg) {
            if ((this.GetSentMessageStatusByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSentMessageStatusByIDCompleted(this, new GetSentMessageStatusByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSentMessages", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SentMessage[] GetSentMessages(string userName, string password, System.DateTime fromDate, System.DateTime toDate, ref string message) {
            object[] results = this.Invoke("GetSentMessages", new object[] {
                        userName,
                        password,
                        fromDate,
                        toDate,
                        message});
            message = ((string)(results[1]));
            return ((SentMessage[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSentMessagesAsync(string userName, string password, System.DateTime fromDate, System.DateTime toDate, string message) {
            this.GetSentMessagesAsync(userName, password, fromDate, toDate, message, null);
        }
        
        /// <remarks/>
        public void GetSentMessagesAsync(string userName, string password, System.DateTime fromDate, System.DateTime toDate, string message, object userState) {
            if ((this.GetSentMessagesOperationCompleted == null)) {
                this.GetSentMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSentMessagesOperationCompleted);
            }
            this.InvokeAsync("GetSentMessages", new object[] {
                        userName,
                        password,
                        fromDate,
                        toDate,
                        message}, this.GetSentMessagesOperationCompleted, userState);
        }
        
        private void OnGetSentMessagesOperationCompleted(object arg) {
            if ((this.GetSentMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSentMessagesCompleted(this, new GetSentMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetReceivedMessageByLastMessageID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReceivedMessage[] GetReceivedMessageByLastMessageID(string userName, string password, long lastMessageID, ref string message) {
            object[] results = this.Invoke("GetReceivedMessageByLastMessageID", new object[] {
                        userName,
                        password,
                        lastMessageID,
                        message});
            message = ((string)(results[1]));
            return ((ReceivedMessage[])(results[0]));
        }
        
        /// <remarks/>
        public void GetReceivedMessageByLastMessageIDAsync(string userName, string password, long lastMessageID, string message) {
            this.GetReceivedMessageByLastMessageIDAsync(userName, password, lastMessageID, message, null);
        }
        
        /// <remarks/>
        public void GetReceivedMessageByLastMessageIDAsync(string userName, string password, long lastMessageID, string message, object userState) {
            if ((this.GetReceivedMessageByLastMessageIDOperationCompleted == null)) {
                this.GetReceivedMessageByLastMessageIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReceivedMessageByLastMessageIDOperationCompleted);
            }
            this.InvokeAsync("GetReceivedMessageByLastMessageID", new object[] {
                        userName,
                        password,
                        lastMessageID,
                        message}, this.GetReceivedMessageByLastMessageIDOperationCompleted, userState);
        }
        
        private void OnGetReceivedMessageByLastMessageIDOperationCompleted(object arg) {
            if ((this.GetReceivedMessageByLastMessageIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReceivedMessageByLastMessageIDCompleted(this, new GetReceivedMessageByLastMessageIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetReceivedMessageByLastMessageIDAndLineNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReceivedMessage[] GetReceivedMessageByLastMessageIDAndLineNumber(string userName, string password, long lastMessageID, long lineNumber, int countOfMessages, ref string message) {
            object[] results = this.Invoke("GetReceivedMessageByLastMessageIDAndLineNumber", new object[] {
                        userName,
                        password,
                        lastMessageID,
                        lineNumber,
                        countOfMessages,
                        message});
            message = ((string)(results[1]));
            return ((ReceivedMessage[])(results[0]));
        }
        
        /// <remarks/>
        public void GetReceivedMessageByLastMessageIDAndLineNumberAsync(string userName, string password, long lastMessageID, long lineNumber, int countOfMessages, string message) {
            this.GetReceivedMessageByLastMessageIDAndLineNumberAsync(userName, password, lastMessageID, lineNumber, countOfMessages, message, null);
        }
        
        /// <remarks/>
        public void GetReceivedMessageByLastMessageIDAndLineNumberAsync(string userName, string password, long lastMessageID, long lineNumber, int countOfMessages, string message, object userState) {
            if ((this.GetReceivedMessageByLastMessageIDAndLineNumberOperationCompleted == null)) {
                this.GetReceivedMessageByLastMessageIDAndLineNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReceivedMessageByLastMessageIDAndLineNumberOperationCompleted);
            }
            this.InvokeAsync("GetReceivedMessageByLastMessageIDAndLineNumber", new object[] {
                        userName,
                        password,
                        lastMessageID,
                        lineNumber,
                        countOfMessages,
                        message}, this.GetReceivedMessageByLastMessageIDAndLineNumberOperationCompleted, userState);
        }
        
        private void OnGetReceivedMessageByLastMessageIDAndLineNumberOperationCompleted(object arg) {
            if ((this.GetReceivedMessageByLastMessageIDAndLineNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReceivedMessageByLastMessageIDAndLineNumberCompleted(this, new GetReceivedMessageByLastMessageIDAndLineNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetReceivedMessages", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReceivedMessage[] GetReceivedMessages(string userName, string password, System.DateTime fromDate, System.DateTime toDate, ref string message) {
            object[] results = this.Invoke("GetReceivedMessages", new object[] {
                        userName,
                        password,
                        fromDate,
                        toDate,
                        message});
            message = ((string)(results[1]));
            return ((ReceivedMessage[])(results[0]));
        }
        
        /// <remarks/>
        public void GetReceivedMessagesAsync(string userName, string password, System.DateTime fromDate, System.DateTime toDate, string message) {
            this.GetReceivedMessagesAsync(userName, password, fromDate, toDate, message, null);
        }
        
        /// <remarks/>
        public void GetReceivedMessagesAsync(string userName, string password, System.DateTime fromDate, System.DateTime toDate, string message, object userState) {
            if ((this.GetReceivedMessagesOperationCompleted == null)) {
                this.GetReceivedMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReceivedMessagesOperationCompleted);
            }
            this.InvokeAsync("GetReceivedMessages", new object[] {
                        userName,
                        password,
                        fromDate,
                        toDate,
                        message}, this.GetReceivedMessagesOperationCompleted, userState);
        }
        
        private void OnGetReceivedMessagesOperationCompleted(object arg) {
            if ((this.GetReceivedMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReceivedMessagesCompleted(this, new GetReceivedMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllMessages", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AllMessage[] GetAllMessages(string userName, string password, System.DateTime fromDate, System.DateTime toDate, ref string message) {
            object[] results = this.Invoke("GetAllMessages", new object[] {
                        userName,
                        password,
                        fromDate,
                        toDate,
                        message});
            message = ((string)(results[1]));
            return ((AllMessage[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllMessagesAsync(string userName, string password, System.DateTime fromDate, System.DateTime toDate, string message) {
            this.GetAllMessagesAsync(userName, password, fromDate, toDate, message, null);
        }
        
        /// <remarks/>
        public void GetAllMessagesAsync(string userName, string password, System.DateTime fromDate, System.DateTime toDate, string message, object userState) {
            if ((this.GetAllMessagesOperationCompleted == null)) {
                this.GetAllMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllMessagesOperationCompleted);
            }
            this.InvokeAsync("GetAllMessages", new object[] {
                        userName,
                        password,
                        fromDate,
                        toDate,
                        message}, this.GetAllMessagesOperationCompleted, userState);
        }
        
        private void OnGetAllMessagesOperationCompleted(object arg) {
            if ((this.GetAllMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllMessagesCompleted(this, new GetAllMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTrashedMessages", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TrashedMessage[] GetTrashedMessages(string userName, string password, System.DateTime fromDate, System.DateTime toDate, ref string message) {
            object[] results = this.Invoke("GetTrashedMessages", new object[] {
                        userName,
                        password,
                        fromDate,
                        toDate,
                        message});
            message = ((string)(results[1]));
            return ((TrashedMessage[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTrashedMessagesAsync(string userName, string password, System.DateTime fromDate, System.DateTime toDate, string message) {
            this.GetTrashedMessagesAsync(userName, password, fromDate, toDate, message, null);
        }
        
        /// <remarks/>
        public void GetTrashedMessagesAsync(string userName, string password, System.DateTime fromDate, System.DateTime toDate, string message, object userState) {
            if ((this.GetTrashedMessagesOperationCompleted == null)) {
                this.GetTrashedMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTrashedMessagesOperationCompleted);
            }
            this.InvokeAsync("GetTrashedMessages", new object[] {
                        userName,
                        password,
                        fromDate,
                        toDate,
                        message}, this.GetTrashedMessagesOperationCompleted, userState);
        }
        
        private void OnGetTrashedMessagesOperationCompleted(object arg) {
            if ((this.GetTrashedMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTrashedMessagesCompleted(this, new GetTrashedMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCurrentDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime GetCurrentDate() {
            object[] results = this.Invoke("GetCurrentDate", new object[0]);
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public void GetCurrentDateAsync() {
            this.GetCurrentDateAsync(null);
        }
        
        /// <remarks/>
        public void GetCurrentDateAsync(object userState) {
            if ((this.GetCurrentDateOperationCompleted == null)) {
                this.GetCurrentDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrentDateOperationCompleted);
            }
            this.InvokeAsync("GetCurrentDate", new object[0], this.GetCurrentDateOperationCompleted, userState);
        }
        
        private void OnGetCurrentDateOperationCompleted(object arg) {
            if ((this.GetCurrentDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrentDateCompleted(this, new GetCurrentDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserCredit", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<double> GetUserCredit(string userName, string password, ref string message) {
            object[] results = this.Invoke("GetUserCredit", new object[] {
                        userName,
                        password,
                        message});
            message = ((string)(results[1]));
            return ((System.Nullable<double>)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserCreditAsync(string userName, string password, string message) {
            this.GetUserCreditAsync(userName, password, message, null);
        }
        
        /// <remarks/>
        public void GetUserCreditAsync(string userName, string password, string message, object userState) {
            if ((this.GetUserCreditOperationCompleted == null)) {
                this.GetUserCreditOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserCreditOperationCompleted);
            }
            this.InvokeAsync("GetUserCredit", new object[] {
                        userName,
                        password,
                        message}, this.GetUserCreditOperationCompleted, userState);
        }
        
        private void OnGetUserCreditOperationCompleted(object arg) {
            if ((this.GetUserCreditCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserCreditCompleted(this, new GetUserCreditCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDefualtLineNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> GetDefualtLineNumber(string userName, string password, ref string message) {
            object[] results = this.Invoke("GetDefualtLineNumber", new object[] {
                        userName,
                        password,
                        message});
            message = ((string)(results[1]));
            return ((System.Nullable<int>)(results[0]));
        }
        
        /// <remarks/>
        public void GetDefualtLineNumberAsync(string userName, string password, string message) {
            this.GetDefualtLineNumberAsync(userName, password, message, null);
        }
        
        /// <remarks/>
        public void GetDefualtLineNumberAsync(string userName, string password, string message, object userState) {
            if ((this.GetDefualtLineNumberOperationCompleted == null)) {
                this.GetDefualtLineNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDefualtLineNumberOperationCompleted);
            }
            this.InvokeAsync("GetDefualtLineNumber", new object[] {
                        userName,
                        password,
                        message}, this.GetDefualtLineNumberOperationCompleted, userState);
        }
        
        private void OnGetDefualtLineNumberOperationCompleted(object arg) {
            if ((this.GetDefualtLineNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDefualtLineNumberCompleted(this, new GetDefualtLineNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMessageCustomerClub", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SendMessageCustomerClub(string userName, string password, string messageBody, ref string message) {
            object[] results = this.Invoke("SendMessageCustomerClub", new object[] {
                        userName,
                        password,
                        messageBody,
                        message});
            message = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageCustomerClubAsync(string userName, string password, string messageBody, string message) {
            this.SendMessageCustomerClubAsync(userName, password, messageBody, message, null);
        }
        
        /// <remarks/>
        public void SendMessageCustomerClubAsync(string userName, string password, string messageBody, string message, object userState) {
            if ((this.SendMessageCustomerClubOperationCompleted == null)) {
                this.SendMessageCustomerClubOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageCustomerClubOperationCompleted);
            }
            this.InvokeAsync("SendMessageCustomerClub", new object[] {
                        userName,
                        password,
                        messageBody,
                        message}, this.SendMessageCustomerClubOperationCompleted, userState);
        }
        
        private void OnSendMessageCustomerClubOperationCompleted(object arg) {
            if ((this.SendMessageCustomerClubCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageCustomerClubCompleted(this, new SendMessageCustomerClubCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMessageToOneCustomerClub", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SendMessageToOneCustomerClub(string userName, string password, string messageBody, string mobile, ref string message) {
            object[] results = this.Invoke("SendMessageToOneCustomerClub", new object[] {
                        userName,
                        password,
                        messageBody,
                        mobile,
                        message});
            message = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageToOneCustomerClubAsync(string userName, string password, string messageBody, string mobile, string message) {
            this.SendMessageToOneCustomerClubAsync(userName, password, messageBody, mobile, message, null);
        }
        
        /// <remarks/>
        public void SendMessageToOneCustomerClubAsync(string userName, string password, string messageBody, string mobile, string message, object userState) {
            if ((this.SendMessageToOneCustomerClubOperationCompleted == null)) {
                this.SendMessageToOneCustomerClubOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageToOneCustomerClubOperationCompleted);
            }
            this.InvokeAsync("SendMessageToOneCustomerClub", new object[] {
                        userName,
                        password,
                        messageBody,
                        mobile,
                        message}, this.SendMessageToOneCustomerClubOperationCompleted, userState);
        }
        
        private void OnSendMessageToOneCustomerClubOperationCompleted(object arg) {
            if ((this.SendMessageToOneCustomerClubCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageToOneCustomerClubCompleted(this, new SendMessageToOneCustomerClubCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendBulkMessageToCustomersClub", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long[] SendBulkMessageToCustomersClub(string userName, string password, string messageBody, long[] ListOfmobile, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> SendDateTime, ref string message) {
            object[] results = this.Invoke("SendBulkMessageToCustomersClub", new object[] {
                        userName,
                        password,
                        messageBody,
                        ListOfmobile,
                        SendDateTime,
                        message});
            message = ((string)(results[1]));
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void SendBulkMessageToCustomersClubAsync(string userName, string password, string messageBody, long[] ListOfmobile, System.Nullable<System.DateTime> SendDateTime, string message) {
            this.SendBulkMessageToCustomersClubAsync(userName, password, messageBody, ListOfmobile, SendDateTime, message, null);
        }
        
        /// <remarks/>
        public void SendBulkMessageToCustomersClubAsync(string userName, string password, string messageBody, long[] ListOfmobile, System.Nullable<System.DateTime> SendDateTime, string message, object userState) {
            if ((this.SendBulkMessageToCustomersClubOperationCompleted == null)) {
                this.SendBulkMessageToCustomersClubOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendBulkMessageToCustomersClubOperationCompleted);
            }
            this.InvokeAsync("SendBulkMessageToCustomersClub", new object[] {
                        userName,
                        password,
                        messageBody,
                        ListOfmobile,
                        SendDateTime,
                        message}, this.SendBulkMessageToCustomersClubOperationCompleted, userState);
        }
        
        private void OnSendBulkMessageToCustomersClubOperationCompleted(object arg) {
            if ((this.SendBulkMessageToCustomersClubCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendBulkMessageToCustomersClubCompleted(this, new SendBulkMessageToCustomersClubCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMessageToCustomersClubCategories", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long[] SendMessageToCustomersClubCategories(string userName, string password, string messageBody, int[] ListOfCustomerClubCategories, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> SendDateTime, ref string message) {
            object[] results = this.Invoke("SendMessageToCustomersClubCategories", new object[] {
                        userName,
                        password,
                        messageBody,
                        ListOfCustomerClubCategories,
                        SendDateTime,
                        message});
            message = ((string)(results[1]));
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageToCustomersClubCategoriesAsync(string userName, string password, string messageBody, int[] ListOfCustomerClubCategories, System.Nullable<System.DateTime> SendDateTime, string message) {
            this.SendMessageToCustomersClubCategoriesAsync(userName, password, messageBody, ListOfCustomerClubCategories, SendDateTime, message, null);
        }
        
        /// <remarks/>
        public void SendMessageToCustomersClubCategoriesAsync(string userName, string password, string messageBody, int[] ListOfCustomerClubCategories, System.Nullable<System.DateTime> SendDateTime, string message, object userState) {
            if ((this.SendMessageToCustomersClubCategoriesOperationCompleted == null)) {
                this.SendMessageToCustomersClubCategoriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageToCustomersClubCategoriesOperationCompleted);
            }
            this.InvokeAsync("SendMessageToCustomersClubCategories", new object[] {
                        userName,
                        password,
                        messageBody,
                        ListOfCustomerClubCategories,
                        SendDateTime,
                        message}, this.SendMessageToCustomersClubCategoriesOperationCompleted, userState);
        }
        
        private void OnSendMessageToCustomersClubCategoriesOperationCompleted(object arg) {
            if ((this.SendMessageToCustomersClubCategoriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageToCustomersClubCategoriesCompleted(this, new SendMessageToCustomersClubCategoriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMessageToCustomersClubCategory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long[] SendMessageToCustomersClubCategory(string userName, string password, string messageBody, int customerClubCategoryId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> SendDateTime, ref string message) {
            object[] results = this.Invoke("SendMessageToCustomersClubCategory", new object[] {
                        userName,
                        password,
                        messageBody,
                        customerClubCategoryId,
                        SendDateTime,
                        message});
            message = ((string)(results[1]));
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageToCustomersClubCategoryAsync(string userName, string password, string messageBody, int customerClubCategoryId, System.Nullable<System.DateTime> SendDateTime, string message) {
            this.SendMessageToCustomersClubCategoryAsync(userName, password, messageBody, customerClubCategoryId, SendDateTime, message, null);
        }
        
        /// <remarks/>
        public void SendMessageToCustomersClubCategoryAsync(string userName, string password, string messageBody, int customerClubCategoryId, System.Nullable<System.DateTime> SendDateTime, string message, object userState) {
            if ((this.SendMessageToCustomersClubCategoryOperationCompleted == null)) {
                this.SendMessageToCustomersClubCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageToCustomersClubCategoryOperationCompleted);
            }
            this.InvokeAsync("SendMessageToCustomersClubCategory", new object[] {
                        userName,
                        password,
                        messageBody,
                        customerClubCategoryId,
                        SendDateTime,
                        message}, this.SendMessageToCustomersClubCategoryOperationCompleted, userState);
        }
        
        private void OnSendMessageToCustomersClubCategoryOperationCompleted(object arg) {
            if ((this.SendMessageToCustomersClubCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageToCustomersClubCategoryCompleted(this, new SendMessageToCustomersClubCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/VipSendMessages", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long[] VipSendMessages(string userName, string password, WebServiceSmsSend[] webServiceSMSSendDetails, string lineNumber, ref string message) {
            object[] results = this.Invoke("VipSendMessages", new object[] {
                        userName,
                        password,
                        webServiceSMSSendDetails,
                        lineNumber,
                        message});
            message = ((string)(results[1]));
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void VipSendMessagesAsync(string userName, string password, WebServiceSmsSend[] webServiceSMSSendDetails, string lineNumber, string message) {
            this.VipSendMessagesAsync(userName, password, webServiceSMSSendDetails, lineNumber, message, null);
        }
        
        /// <remarks/>
        public void VipSendMessagesAsync(string userName, string password, WebServiceSmsSend[] webServiceSMSSendDetails, string lineNumber, string message, object userState) {
            if ((this.VipSendMessagesOperationCompleted == null)) {
                this.VipSendMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVipSendMessagesOperationCompleted);
            }
            this.InvokeAsync("VipSendMessages", new object[] {
                        userName,
                        password,
                        webServiceSMSSendDetails,
                        lineNumber,
                        message}, this.VipSendMessagesOperationCompleted, userState);
        }
        
        private void OnVipSendMessagesOperationCompleted(object arg) {
            if ((this.VipSendMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VipSendMessagesCompleted(this, new VipSendMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/VipSendMessageWithBachKey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long[] VipSendMessageWithBachKey(string userName, string password, WebServiceSmsSend[] webServiceSMSSendDetails, string lineNumber, ref System.Guid batchKey, ref string message) {
            object[] results = this.Invoke("VipSendMessageWithBachKey", new object[] {
                        userName,
                        password,
                        webServiceSMSSendDetails,
                        lineNumber,
                        batchKey,
                        message});
            batchKey = ((System.Guid)(results[1]));
            message = ((string)(results[2]));
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void VipSendMessageWithBachKeyAsync(string userName, string password, WebServiceSmsSend[] webServiceSMSSendDetails, string lineNumber, System.Guid batchKey, string message) {
            this.VipSendMessageWithBachKeyAsync(userName, password, webServiceSMSSendDetails, lineNumber, batchKey, message, null);
        }
        
        /// <remarks/>
        public void VipSendMessageWithBachKeyAsync(string userName, string password, WebServiceSmsSend[] webServiceSMSSendDetails, string lineNumber, System.Guid batchKey, string message, object userState) {
            if ((this.VipSendMessageWithBachKeyOperationCompleted == null)) {
                this.VipSendMessageWithBachKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVipSendMessageWithBachKeyOperationCompleted);
            }
            this.InvokeAsync("VipSendMessageWithBachKey", new object[] {
                        userName,
                        password,
                        webServiceSMSSendDetails,
                        lineNumber,
                        batchKey,
                        message}, this.VipSendMessageWithBachKeyOperationCompleted, userState);
        }
        
        private void OnVipSendMessageWithBachKeyOperationCompleted(object arg) {
            if ((this.VipSendMessageWithBachKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VipSendMessageWithBachKeyCompleted(this, new VipSendMessageWithBachKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetVipSentMessages", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SentMessage[] GetVipSentMessages(string userName, string password, System.DateTime fromDate, System.DateTime toDate, ref string message) {
            object[] results = this.Invoke("GetVipSentMessages", new object[] {
                        userName,
                        password,
                        fromDate,
                        toDate,
                        message});
            message = ((string)(results[1]));
            return ((SentMessage[])(results[0]));
        }
        
        /// <remarks/>
        public void GetVipSentMessagesAsync(string userName, string password, System.DateTime fromDate, System.DateTime toDate, string message) {
            this.GetVipSentMessagesAsync(userName, password, fromDate, toDate, message, null);
        }
        
        /// <remarks/>
        public void GetVipSentMessagesAsync(string userName, string password, System.DateTime fromDate, System.DateTime toDate, string message, object userState) {
            if ((this.GetVipSentMessagesOperationCompleted == null)) {
                this.GetVipSentMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVipSentMessagesOperationCompleted);
            }
            this.InvokeAsync("GetVipSentMessages", new object[] {
                        userName,
                        password,
                        fromDate,
                        toDate,
                        message}, this.GetVipSentMessagesOperationCompleted, userState);
        }
        
        private void OnGetVipSentMessagesOperationCompleted(object arg) {
            if ((this.GetVipSentMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVipSentMessagesCompleted(this, new GetVipSentMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetVipSentMessageStatusByID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SentSmsDetails GetVipSentMessageStatusByID(string userName, string password, long messageID, ref string message) {
            object[] results = this.Invoke("GetVipSentMessageStatusByID", new object[] {
                        userName,
                        password,
                        messageID,
                        message});
            message = ((string)(results[1]));
            return ((SentSmsDetails)(results[0]));
        }
        
        /// <remarks/>
        public void GetVipSentMessageStatusByIDAsync(string userName, string password, long messageID, string message) {
            this.GetVipSentMessageStatusByIDAsync(userName, password, messageID, message, null);
        }
        
        /// <remarks/>
        public void GetVipSentMessageStatusByIDAsync(string userName, string password, long messageID, string message, object userState) {
            if ((this.GetVipSentMessageStatusByIDOperationCompleted == null)) {
                this.GetVipSentMessageStatusByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVipSentMessageStatusByIDOperationCompleted);
            }
            this.InvokeAsync("GetVipSentMessageStatusByID", new object[] {
                        userName,
                        password,
                        messageID,
                        message}, this.GetVipSentMessageStatusByIDOperationCompleted, userState);
        }
        
        private void OnGetVipSentMessageStatusByIDOperationCompleted(object arg) {
            if ((this.GetVipSentMessageStatusByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVipSentMessageStatusByIDCompleted(this, new GetVipSentMessageStatusByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetVipSentMessageStatusByIDWithDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SentSmsDetails GetVipSentMessageStatusByIDWithDate(string userName, string password, long messageID, System.DateTime messageSendDateTime, ref string message) {
            object[] results = this.Invoke("GetVipSentMessageStatusByIDWithDate", new object[] {
                        userName,
                        password,
                        messageID,
                        messageSendDateTime,
                        message});
            message = ((string)(results[1]));
            return ((SentSmsDetails)(results[0]));
        }
        
        /// <remarks/>
        public void GetVipSentMessageStatusByIDWithDateAsync(string userName, string password, long messageID, System.DateTime messageSendDateTime, string message) {
            this.GetVipSentMessageStatusByIDWithDateAsync(userName, password, messageID, messageSendDateTime, message, null);
        }
        
        /// <remarks/>
        public void GetVipSentMessageStatusByIDWithDateAsync(string userName, string password, long messageID, System.DateTime messageSendDateTime, string message, object userState) {
            if ((this.GetVipSentMessageStatusByIDWithDateOperationCompleted == null)) {
                this.GetVipSentMessageStatusByIDWithDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVipSentMessageStatusByIDWithDateOperationCompleted);
            }
            this.InvokeAsync("GetVipSentMessageStatusByIDWithDate", new object[] {
                        userName,
                        password,
                        messageID,
                        messageSendDateTime,
                        message}, this.GetVipSentMessageStatusByIDWithDateOperationCompleted, userState);
        }
        
        private void OnGetVipSentMessageStatusByIDWithDateOperationCompleted(object arg) {
            if ((this.GetVipSentMessageStatusByIDWithDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVipSentMessageStatusByIDWithDateCompleted(this, new GetVipSentMessageStatusByIDWithDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetVipSentMessageStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SentSmsDetails[] GetVipSentMessageStatus(string userName, string password, System.Guid batchKey, int requestedPageNumber, int rowsPerPage, ref int countOfAll, ref string message) {
            object[] results = this.Invoke("GetVipSentMessageStatus", new object[] {
                        userName,
                        password,
                        batchKey,
                        requestedPageNumber,
                        rowsPerPage,
                        countOfAll,
                        message});
            countOfAll = ((int)(results[1]));
            message = ((string)(results[2]));
            return ((SentSmsDetails[])(results[0]));
        }
        
        /// <remarks/>
        public void GetVipSentMessageStatusAsync(string userName, string password, System.Guid batchKey, int requestedPageNumber, int rowsPerPage, int countOfAll, string message) {
            this.GetVipSentMessageStatusAsync(userName, password, batchKey, requestedPageNumber, rowsPerPage, countOfAll, message, null);
        }
        
        /// <remarks/>
        public void GetVipSentMessageStatusAsync(string userName, string password, System.Guid batchKey, int requestedPageNumber, int rowsPerPage, int countOfAll, string message, object userState) {
            if ((this.GetVipSentMessageStatusOperationCompleted == null)) {
                this.GetVipSentMessageStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVipSentMessageStatusOperationCompleted);
            }
            this.InvokeAsync("GetVipSentMessageStatus", new object[] {
                        userName,
                        password,
                        batchKey,
                        requestedPageNumber,
                        rowsPerPage,
                        countOfAll,
                        message}, this.GetVipSentMessageStatusOperationCompleted, userState);
        }
        
        private void OnGetVipSentMessageStatusOperationCompleted(object arg) {
            if ((this.GetVipSentMessageStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVipSentMessageStatusCompleted(this, new GetVipSentMessageStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/VipSendMessageWithLineNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long[] VipSendMessageWithLineNumber(string userName, string password, long[] mobileNos, string[] messages, string lineNumber, ref string message) {
            object[] results = this.Invoke("VipSendMessageWithLineNumber", new object[] {
                        userName,
                        password,
                        mobileNos,
                        messages,
                        lineNumber,
                        message});
            message = ((string)(results[1]));
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void VipSendMessageWithLineNumberAsync(string userName, string password, long[] mobileNos, string[] messages, string lineNumber, string message) {
            this.VipSendMessageWithLineNumberAsync(userName, password, mobileNos, messages, lineNumber, message, null);
        }
        
        /// <remarks/>
        public void VipSendMessageWithLineNumberAsync(string userName, string password, long[] mobileNos, string[] messages, string lineNumber, string message, object userState) {
            if ((this.VipSendMessageWithLineNumberOperationCompleted == null)) {
                this.VipSendMessageWithLineNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVipSendMessageWithLineNumberOperationCompleted);
            }
            this.InvokeAsync("VipSendMessageWithLineNumber", new object[] {
                        userName,
                        password,
                        mobileNos,
                        messages,
                        lineNumber,
                        message}, this.VipSendMessageWithLineNumberOperationCompleted, userState);
        }
        
        private void OnVipSendMessageWithLineNumberOperationCompleted(object arg) {
            if ((this.VipSendMessageWithLineNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VipSendMessageWithLineNumberCompleted(this, new VipSendMessageWithLineNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/VipSendMessageWithLineNumberAndBatchKey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long[] VipSendMessageWithLineNumberAndBatchKey(string userName, string password, long[] mobileNos, string[] messages, string lineNumber, ref System.Guid batchKey, ref string message) {
            object[] results = this.Invoke("VipSendMessageWithLineNumberAndBatchKey", new object[] {
                        userName,
                        password,
                        mobileNos,
                        messages,
                        lineNumber,
                        batchKey,
                        message});
            batchKey = ((System.Guid)(results[1]));
            message = ((string)(results[2]));
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void VipSendMessageWithLineNumberAndBatchKeyAsync(string userName, string password, long[] mobileNos, string[] messages, string lineNumber, System.Guid batchKey, string message) {
            this.VipSendMessageWithLineNumberAndBatchKeyAsync(userName, password, mobileNos, messages, lineNumber, batchKey, message, null);
        }
        
        /// <remarks/>
        public void VipSendMessageWithLineNumberAndBatchKeyAsync(string userName, string password, long[] mobileNos, string[] messages, string lineNumber, System.Guid batchKey, string message, object userState) {
            if ((this.VipSendMessageWithLineNumberAndBatchKeyOperationCompleted == null)) {
                this.VipSendMessageWithLineNumberAndBatchKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVipSendMessageWithLineNumberAndBatchKeyOperationCompleted);
            }
            this.InvokeAsync("VipSendMessageWithLineNumberAndBatchKey", new object[] {
                        userName,
                        password,
                        mobileNos,
                        messages,
                        lineNumber,
                        batchKey,
                        message}, this.VipSendMessageWithLineNumberAndBatchKeyOperationCompleted, userState);
        }
        
        private void OnVipSendMessageWithLineNumberAndBatchKeyOperationCompleted(object arg) {
            if ((this.VipSendMessageWithLineNumberAndBatchKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VipSendMessageWithLineNumberAndBatchKeyCompleted(this, new VipSendMessageWithLineNumberAndBatchKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveVIP_SendCorespondentMessage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SaveVIP_SendCorespondentMessage(string userName, string password, VIPSendCorespondentMessage[] vipSendCorespondent, string lineNumber, string CountOfRecipient, string cost, int increaseChargeCount, ref string message) {
            object[] results = this.Invoke("SaveVIP_SendCorespondentMessage", new object[] {
                        userName,
                        password,
                        vipSendCorespondent,
                        lineNumber,
                        CountOfRecipient,
                        cost,
                        increaseChargeCount,
                        message});
            message = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SaveVIP_SendCorespondentMessageAsync(string userName, string password, VIPSendCorespondentMessage[] vipSendCorespondent, string lineNumber, string CountOfRecipient, string cost, int increaseChargeCount, string message) {
            this.SaveVIP_SendCorespondentMessageAsync(userName, password, vipSendCorespondent, lineNumber, CountOfRecipient, cost, increaseChargeCount, message, null);
        }
        
        /// <remarks/>
        public void SaveVIP_SendCorespondentMessageAsync(string userName, string password, VIPSendCorespondentMessage[] vipSendCorespondent, string lineNumber, string CountOfRecipient, string cost, int increaseChargeCount, string message, object userState) {
            if ((this.SaveVIP_SendCorespondentMessageOperationCompleted == null)) {
                this.SaveVIP_SendCorespondentMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveVIP_SendCorespondentMessageOperationCompleted);
            }
            this.InvokeAsync("SaveVIP_SendCorespondentMessage", new object[] {
                        userName,
                        password,
                        vipSendCorespondent,
                        lineNumber,
                        CountOfRecipient,
                        cost,
                        increaseChargeCount,
                        message}, this.SaveVIP_SendCorespondentMessageOperationCompleted, userState);
        }
        
        private void OnSaveVIP_SendCorespondentMessageOperationCompleted(object arg) {
            if ((this.SaveVIP_SendCorespondentMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveVIP_SendCorespondentMessageCompleted(this, new SaveVIP_SendCorespondentMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WindowsService_SendAutomaticSMS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool WindowsService_SendAutomaticSMS(string userName, string password, int lineNumberId, WebServiceSmsSend[] webServiceSMSSendDetails, System.Guid SecretCode, int OwnerId, ref string message) {
            object[] results = this.Invoke("WindowsService_SendAutomaticSMS", new object[] {
                        userName,
                        password,
                        lineNumberId,
                        webServiceSMSSendDetails,
                        SecretCode,
                        OwnerId,
                        message});
            message = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void WindowsService_SendAutomaticSMSAsync(string userName, string password, int lineNumberId, WebServiceSmsSend[] webServiceSMSSendDetails, System.Guid SecretCode, int OwnerId, string message) {
            this.WindowsService_SendAutomaticSMSAsync(userName, password, lineNumberId, webServiceSMSSendDetails, SecretCode, OwnerId, message, null);
        }
        
        /// <remarks/>
        public void WindowsService_SendAutomaticSMSAsync(string userName, string password, int lineNumberId, WebServiceSmsSend[] webServiceSMSSendDetails, System.Guid SecretCode, int OwnerId, string message, object userState) {
            if ((this.WindowsService_SendAutomaticSMSOperationCompleted == null)) {
                this.WindowsService_SendAutomaticSMSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWindowsService_SendAutomaticSMSOperationCompleted);
            }
            this.InvokeAsync("WindowsService_SendAutomaticSMS", new object[] {
                        userName,
                        password,
                        lineNumberId,
                        webServiceSMSSendDetails,
                        SecretCode,
                        OwnerId,
                        message}, this.WindowsService_SendAutomaticSMSOperationCompleted, userState);
        }
        
        private void OnWindowsService_SendAutomaticSMSOperationCompleted(object arg) {
            if ((this.WindowsService_SendAutomaticSMSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WindowsService_SendAutomaticSMSCompleted(this, new WindowsService_SendAutomaticSMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMessageWithLineNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long[] SendMessageWithLineNumber(string userName, string password, long[] mobileNos, string[] messages, string lineNumber, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> sendDateTime, ref string message) {
            object[] results = this.Invoke("SendMessageWithLineNumber", new object[] {
                        userName,
                        password,
                        mobileNos,
                        messages,
                        lineNumber,
                        sendDateTime,
                        message});
            message = ((string)(results[1]));
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageWithLineNumberAsync(string userName, string password, long[] mobileNos, string[] messages, string lineNumber, System.Nullable<System.DateTime> sendDateTime, string message) {
            this.SendMessageWithLineNumberAsync(userName, password, mobileNos, messages, lineNumber, sendDateTime, message, null);
        }
        
        /// <remarks/>
        public void SendMessageWithLineNumberAsync(string userName, string password, long[] mobileNos, string[] messages, string lineNumber, System.Nullable<System.DateTime> sendDateTime, string message, object userState) {
            if ((this.SendMessageWithLineNumberOperationCompleted == null)) {
                this.SendMessageWithLineNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageWithLineNumberOperationCompleted);
            }
            this.InvokeAsync("SendMessageWithLineNumber", new object[] {
                        userName,
                        password,
                        mobileNos,
                        messages,
                        lineNumber,
                        sendDateTime,
                        message}, this.SendMessageWithLineNumberOperationCompleted, userState);
        }
        
        private void OnSendMessageWithLineNumberOperationCompleted(object arg) {
            if ((this.SendMessageWithLineNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageWithLineNumberCompleted(this, new SendMessageWithLineNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendBulkMessageWithLineNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long[] SendBulkMessageWithLineNumber(string userName, string password, long[] mobileNos, string messages, string lineNumber, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> sendDateTime, ref string message) {
            object[] results = this.Invoke("SendBulkMessageWithLineNumber", new object[] {
                        userName,
                        password,
                        mobileNos,
                        messages,
                        lineNumber,
                        sendDateTime,
                        message});
            message = ((string)(results[1]));
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void SendBulkMessageWithLineNumberAsync(string userName, string password, long[] mobileNos, string messages, string lineNumber, System.Nullable<System.DateTime> sendDateTime, string message) {
            this.SendBulkMessageWithLineNumberAsync(userName, password, mobileNos, messages, lineNumber, sendDateTime, message, null);
        }
        
        /// <remarks/>
        public void SendBulkMessageWithLineNumberAsync(string userName, string password, long[] mobileNos, string messages, string lineNumber, System.Nullable<System.DateTime> sendDateTime, string message, object userState) {
            if ((this.SendBulkMessageWithLineNumberOperationCompleted == null)) {
                this.SendBulkMessageWithLineNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendBulkMessageWithLineNumberOperationCompleted);
            }
            this.InvokeAsync("SendBulkMessageWithLineNumber", new object[] {
                        userName,
                        password,
                        mobileNos,
                        messages,
                        lineNumber,
                        sendDateTime,
                        message}, this.SendBulkMessageWithLineNumberOperationCompleted, userState);
        }
        
        private void OnSendBulkMessageWithLineNumberOperationCompleted(object arg) {
            if ((this.SendBulkMessageWithLineNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendBulkMessageWithLineNumberCompleted(this, new SendBulkMessageWithLineNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendBulkMessageWithLineNumberAndBatchKey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long[] SendBulkMessageWithLineNumberAndBatchKey(string userName, string password, long[] mobileNos, string messages, string lineNumber, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> sendDateTime, ref System.Guid batchKey, ref string message) {
            object[] results = this.Invoke("SendBulkMessageWithLineNumberAndBatchKey", new object[] {
                        userName,
                        password,
                        mobileNos,
                        messages,
                        lineNumber,
                        sendDateTime,
                        batchKey,
                        message});
            batchKey = ((System.Guid)(results[1]));
            message = ((string)(results[2]));
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void SendBulkMessageWithLineNumberAndBatchKeyAsync(string userName, string password, long[] mobileNos, string messages, string lineNumber, System.Nullable<System.DateTime> sendDateTime, System.Guid batchKey, string message) {
            this.SendBulkMessageWithLineNumberAndBatchKeyAsync(userName, password, mobileNos, messages, lineNumber, sendDateTime, batchKey, message, null);
        }
        
        /// <remarks/>
        public void SendBulkMessageWithLineNumberAndBatchKeyAsync(string userName, string password, long[] mobileNos, string messages, string lineNumber, System.Nullable<System.DateTime> sendDateTime, System.Guid batchKey, string message, object userState) {
            if ((this.SendBulkMessageWithLineNumberAndBatchKeyOperationCompleted == null)) {
                this.SendBulkMessageWithLineNumberAndBatchKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendBulkMessageWithLineNumberAndBatchKeyOperationCompleted);
            }
            this.InvokeAsync("SendBulkMessageWithLineNumberAndBatchKey", new object[] {
                        userName,
                        password,
                        mobileNos,
                        messages,
                        lineNumber,
                        sendDateTime,
                        batchKey,
                        message}, this.SendBulkMessageWithLineNumberAndBatchKeyOperationCompleted, userState);
        }
        
        private void OnSendBulkMessageWithLineNumberAndBatchKeyOperationCompleted(object arg) {
            if ((this.SendBulkMessageWithLineNumberAndBatchKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendBulkMessageWithLineNumberAndBatchKeyCompleted(this, new SendBulkMessageWithLineNumberAndBatchKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMessageWithLineNumberAndBatchKey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long[] SendMessageWithLineNumberAndBatchKey(string userName, string password, long[] mobileNos, string[] messages, string lineNumber, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> sendDateTime, ref System.Guid batchKey, ref string message) {
            object[] results = this.Invoke("SendMessageWithLineNumberAndBatchKey", new object[] {
                        userName,
                        password,
                        mobileNos,
                        messages,
                        lineNumber,
                        sendDateTime,
                        batchKey,
                        message});
            batchKey = ((System.Guid)(results[1]));
            message = ((string)(results[2]));
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageWithLineNumberAndBatchKeyAsync(string userName, string password, long[] mobileNos, string[] messages, string lineNumber, System.Nullable<System.DateTime> sendDateTime, System.Guid batchKey, string message) {
            this.SendMessageWithLineNumberAndBatchKeyAsync(userName, password, mobileNos, messages, lineNumber, sendDateTime, batchKey, message, null);
        }
        
        /// <remarks/>
        public void SendMessageWithLineNumberAndBatchKeyAsync(string userName, string password, long[] mobileNos, string[] messages, string lineNumber, System.Nullable<System.DateTime> sendDateTime, System.Guid batchKey, string message, object userState) {
            if ((this.SendMessageWithLineNumberAndBatchKeyOperationCompleted == null)) {
                this.SendMessageWithLineNumberAndBatchKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageWithLineNumberAndBatchKeyOperationCompleted);
            }
            this.InvokeAsync("SendMessageWithLineNumberAndBatchKey", new object[] {
                        userName,
                        password,
                        mobileNos,
                        messages,
                        lineNumber,
                        sendDateTime,
                        batchKey,
                        message}, this.SendMessageWithLineNumberAndBatchKeyOperationCompleted, userState);
        }
        
        private void OnSendMessageWithLineNumberAndBatchKeyOperationCompleted(object arg) {
            if ((this.SendMessageWithLineNumberAndBatchKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageWithLineNumberAndBatchKeyCompleted(this, new SendMessageWithLineNumberAndBatchKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMessage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long[] SendMessage(string userName, string password, WebServiceSmsSend[] webServiceSMSSendDetails, int lineNumberID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> sendDateTime, ref string message) {
            object[] results = this.Invoke("SendMessage", new object[] {
                        userName,
                        password,
                        webServiceSMSSendDetails,
                        lineNumberID,
                        sendDateTime,
                        message});
            message = ((string)(results[1]));
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageAsync(string userName, string password, WebServiceSmsSend[] webServiceSMSSendDetails, int lineNumberID, System.Nullable<System.DateTime> sendDateTime, string message) {
            this.SendMessageAsync(userName, password, webServiceSMSSendDetails, lineNumberID, sendDateTime, message, null);
        }
        
        /// <remarks/>
        public void SendMessageAsync(string userName, string password, WebServiceSmsSend[] webServiceSMSSendDetails, int lineNumberID, System.Nullable<System.DateTime> sendDateTime, string message, object userState) {
            if ((this.SendMessageOperationCompleted == null)) {
                this.SendMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageOperationCompleted);
            }
            this.InvokeAsync("SendMessage", new object[] {
                        userName,
                        password,
                        webServiceSMSSendDetails,
                        lineNumberID,
                        sendDateTime,
                        message}, this.SendMessageOperationCompleted, userState);
        }
        
        private void OnSendMessageOperationCompleted(object arg) {
            if ((this.SendMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageCompleted(this, new SendMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMessageWithBachKey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long[] SendMessageWithBachKey(string userName, string password, WebServiceSmsSend[] webServiceSMSSendDetails, int lineNumberID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> sendDateTime, ref System.Guid batchKey, ref string message) {
            object[] results = this.Invoke("SendMessageWithBachKey", new object[] {
                        userName,
                        password,
                        webServiceSMSSendDetails,
                        lineNumberID,
                        sendDateTime,
                        batchKey,
                        message});
            batchKey = ((System.Guid)(results[1]));
            message = ((string)(results[2]));
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageWithBachKeyAsync(string userName, string password, WebServiceSmsSend[] webServiceSMSSendDetails, int lineNumberID, System.Nullable<System.DateTime> sendDateTime, System.Guid batchKey, string message) {
            this.SendMessageWithBachKeyAsync(userName, password, webServiceSMSSendDetails, lineNumberID, sendDateTime, batchKey, message, null);
        }
        
        /// <remarks/>
        public void SendMessageWithBachKeyAsync(string userName, string password, WebServiceSmsSend[] webServiceSMSSendDetails, int lineNumberID, System.Nullable<System.DateTime> sendDateTime, System.Guid batchKey, string message, object userState) {
            if ((this.SendMessageWithBachKeyOperationCompleted == null)) {
                this.SendMessageWithBachKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageWithBachKeyOperationCompleted);
            }
            this.InvokeAsync("SendMessageWithBachKey", new object[] {
                        userName,
                        password,
                        webServiceSMSSendDetails,
                        lineNumberID,
                        sendDateTime,
                        batchKey,
                        message}, this.SendMessageWithBachKeyOperationCompleted, userState);
        }
        
        private void OnSendMessageWithBachKeyOperationCompleted(object arg) {
            if ((this.SendMessageWithBachKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageWithBachKeyCompleted(this, new SendMessageWithBachKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendSmart", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendSmart(string userName, string password, string fileName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fileContent, System.DateTime sendSince, bool isFlash, string mobileNumColumn, string messageText, int smsLineId) {
            object[] results = this.Invoke("SendSmart", new object[] {
                        userName,
                        password,
                        fileName,
                        fileContent,
                        sendSince,
                        isFlash,
                        mobileNumColumn,
                        messageText,
                        smsLineId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendSmartAsync(string userName, string password, string fileName, byte[] fileContent, System.DateTime sendSince, bool isFlash, string mobileNumColumn, string messageText, int smsLineId) {
            this.SendSmartAsync(userName, password, fileName, fileContent, sendSince, isFlash, mobileNumColumn, messageText, smsLineId, null);
        }
        
        /// <remarks/>
        public void SendSmartAsync(string userName, string password, string fileName, byte[] fileContent, System.DateTime sendSince, bool isFlash, string mobileNumColumn, string messageText, int smsLineId, object userState) {
            if ((this.SendSmartOperationCompleted == null)) {
                this.SendSmartOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSmartOperationCompleted);
            }
            this.InvokeAsync("SendSmart", new object[] {
                        userName,
                        password,
                        fileName,
                        fileContent,
                        sendSince,
                        isFlash,
                        mobileNumColumn,
                        messageText,
                        smsLineId}, this.SendSmartOperationCompleted, userState);
        }
        
        private void OnSendSmartOperationCompleted(object arg) {
            if ((this.SendSmartCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSmartCompleted(this, new SendSmartCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendSmartMadiran", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendSmartMadiran(string userName, string password, string fileName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fileContent, System.DateTime sendSince, bool isFlash, string mobileNumColumn, string smartSendMessageTemplate, string simpleSendMessageTemplate, int smsLineId) {
            object[] results = this.Invoke("SendSmartMadiran", new object[] {
                        userName,
                        password,
                        fileName,
                        fileContent,
                        sendSince,
                        isFlash,
                        mobileNumColumn,
                        smartSendMessageTemplate,
                        simpleSendMessageTemplate,
                        smsLineId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendSmartMadiranAsync(string userName, string password, string fileName, byte[] fileContent, System.DateTime sendSince, bool isFlash, string mobileNumColumn, string smartSendMessageTemplate, string simpleSendMessageTemplate, int smsLineId) {
            this.SendSmartMadiranAsync(userName, password, fileName, fileContent, sendSince, isFlash, mobileNumColumn, smartSendMessageTemplate, simpleSendMessageTemplate, smsLineId, null);
        }
        
        /// <remarks/>
        public void SendSmartMadiranAsync(string userName, string password, string fileName, byte[] fileContent, System.DateTime sendSince, bool isFlash, string mobileNumColumn, string smartSendMessageTemplate, string simpleSendMessageTemplate, int smsLineId, object userState) {
            if ((this.SendSmartMadiranOperationCompleted == null)) {
                this.SendSmartMadiranOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSmartMadiranOperationCompleted);
            }
            this.InvokeAsync("SendSmartMadiran", new object[] {
                        userName,
                        password,
                        fileName,
                        fileContent,
                        sendSince,
                        isFlash,
                        mobileNumColumn,
                        smartSendMessageTemplate,
                        simpleSendMessageTemplate,
                        smsLineId}, this.SendSmartMadiranOperationCompleted, userState);
        }
        
        private void OnSendSmartMadiranOperationCompleted(object arg) {
            if ((this.SendSmartMadiranCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSmartMadiranCompleted(this, new SendSmartMadiranCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveReceiveMessages", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SaveReceiveMessages(string key, string lineNumber, string mobile, string messageText, System.DateTime date, string rowId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<long> ip, ref string ErrorMessage) {
            object[] results = this.Invoke("SaveReceiveMessages", new object[] {
                        key,
                        lineNumber,
                        mobile,
                        messageText,
                        date,
                        rowId,
                        ip,
                        ErrorMessage});
            ErrorMessage = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SaveReceiveMessagesAsync(string key, string lineNumber, string mobile, string messageText, System.DateTime date, string rowId, System.Nullable<long> ip, string ErrorMessage) {
            this.SaveReceiveMessagesAsync(key, lineNumber, mobile, messageText, date, rowId, ip, ErrorMessage, null);
        }
        
        /// <remarks/>
        public void SaveReceiveMessagesAsync(string key, string lineNumber, string mobile, string messageText, System.DateTime date, string rowId, System.Nullable<long> ip, string ErrorMessage, object userState) {
            if ((this.SaveReceiveMessagesOperationCompleted == null)) {
                this.SaveReceiveMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveReceiveMessagesOperationCompleted);
            }
            this.InvokeAsync("SaveReceiveMessages", new object[] {
                        key,
                        lineNumber,
                        mobile,
                        messageText,
                        date,
                        rowId,
                        ip,
                        ErrorMessage}, this.SaveReceiveMessagesOperationCompleted, userState);
        }
        
        private void OnSaveReceiveMessagesOperationCompleted(object arg) {
            if ((this.SaveReceiveMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveReceiveMessagesCompleted(this, new SaveReceiveMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class SMSLineNumber {
        
        private int idField;
        
        private long lineNumberField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public long LineNumber {
            get {
                return this.lineNumberField;
            }
            set {
                this.lineNumberField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class VIPSendCorespondentMessage {
        
        private long magfaSendMessageIdField;
        
        private long mobileNoField;
        
        private string messageBodyField;
        
        private int messageCountField;
        
        /// <remarks/>
        public long MagfaSendMessageId {
            get {
                return this.magfaSendMessageIdField;
            }
            set {
                this.magfaSendMessageIdField = value;
            }
        }
        
        /// <remarks/>
        public long MobileNo {
            get {
                return this.mobileNoField;
            }
            set {
                this.mobileNoField = value;
            }
        }
        
        /// <remarks/>
        public string MessageBody {
            get {
                return this.messageBodyField;
            }
            set {
                this.messageBodyField = value;
            }
        }
        
        /// <remarks/>
        public int MessageCount {
            get {
                return this.messageCountField;
            }
            set {
                this.messageCountField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class WebServiceSmsSend {
        
        private bool isFlashField;
        
        private string messageBodyField;
        
        private long mobileNoField;
        
        /// <remarks/>
        public bool IsFlash {
            get {
                return this.isFlashField;
            }
            set {
                this.isFlashField = value;
            }
        }
        
        /// <remarks/>
        public string MessageBody {
            get {
                return this.messageBodyField;
            }
            set {
                this.messageBodyField = value;
            }
        }
        
        /// <remarks/>
        public long MobileNo {
            get {
                return this.mobileNoField;
            }
            set {
                this.mobileNoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class TrashedMessage {
        
        private long idField;
        
        private string lineNumberField;
        
        private string sMSMessageBodyField;
        
        private string mobileNoField;
        
        private string sendDateTimeField;
        
        private string toBeSentAtField;
        
        private string nativeDeliveryStatusField;
        
        private string typeOfMessageField;
        
        /// <remarks/>
        public long ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string LineNumber {
            get {
                return this.lineNumberField;
            }
            set {
                this.lineNumberField = value;
            }
        }
        
        /// <remarks/>
        public string SMSMessageBody {
            get {
                return this.sMSMessageBodyField;
            }
            set {
                this.sMSMessageBodyField = value;
            }
        }
        
        /// <remarks/>
        public string MobileNo {
            get {
                return this.mobileNoField;
            }
            set {
                this.mobileNoField = value;
            }
        }
        
        /// <remarks/>
        public string SendDateTime {
            get {
                return this.sendDateTimeField;
            }
            set {
                this.sendDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public string ToBeSentAt {
            get {
                return this.toBeSentAtField;
            }
            set {
                this.toBeSentAtField = value;
            }
        }
        
        /// <remarks/>
        public string NativeDeliveryStatus {
            get {
                return this.nativeDeliveryStatusField;
            }
            set {
                this.nativeDeliveryStatusField = value;
            }
        }
        
        /// <remarks/>
        public string TypeOfMessage {
            get {
                return this.typeOfMessageField;
            }
            set {
                this.typeOfMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class AllMessage {
        
        private long idField;
        
        private string lineNumberField;
        
        private string sMSMessageBodyField;
        
        private string mobileNoField;
        
        private string sendDateTimeField;
        
        private string toBeSentAtField;
        
        private string nativeDeliveryStatusField;
        
        private string typeOfMessageField;
        
        /// <remarks/>
        public long ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string LineNumber {
            get {
                return this.lineNumberField;
            }
            set {
                this.lineNumberField = value;
            }
        }
        
        /// <remarks/>
        public string SMSMessageBody {
            get {
                return this.sMSMessageBodyField;
            }
            set {
                this.sMSMessageBodyField = value;
            }
        }
        
        /// <remarks/>
        public string MobileNo {
            get {
                return this.mobileNoField;
            }
            set {
                this.mobileNoField = value;
            }
        }
        
        /// <remarks/>
        public string SendDateTime {
            get {
                return this.sendDateTimeField;
            }
            set {
                this.sendDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public string ToBeSentAt {
            get {
                return this.toBeSentAtField;
            }
            set {
                this.toBeSentAtField = value;
            }
        }
        
        /// <remarks/>
        public string NativeDeliveryStatus {
            get {
                return this.nativeDeliveryStatusField;
            }
            set {
                this.nativeDeliveryStatusField = value;
            }
        }
        
        /// <remarks/>
        public string TypeOfMessage {
            get {
                return this.typeOfMessageField;
            }
            set {
                this.typeOfMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ReceivedMessage {
        
        private long idField;
        
        private string lineNumberField;
        
        private string sMSMessageBodyField;
        
        private string mobileNoField;
        
        private string receiveDateTimeField;
        
        private System.DateTime latinReceiveDateTimeField;
        
        private string typeOfMessageField;
        
        /// <remarks/>
        public long ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string LineNumber {
            get {
                return this.lineNumberField;
            }
            set {
                this.lineNumberField = value;
            }
        }
        
        /// <remarks/>
        public string SMSMessageBody {
            get {
                return this.sMSMessageBodyField;
            }
            set {
                this.sMSMessageBodyField = value;
            }
        }
        
        /// <remarks/>
        public string MobileNo {
            get {
                return this.mobileNoField;
            }
            set {
                this.mobileNoField = value;
            }
        }
        
        /// <remarks/>
        public string ReceiveDateTime {
            get {
                return this.receiveDateTimeField;
            }
            set {
                this.receiveDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LatinReceiveDateTime {
            get {
                return this.latinReceiveDateTimeField;
            }
            set {
                this.latinReceiveDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public string TypeOfMessage {
            get {
                return this.typeOfMessageField;
            }
            set {
                this.typeOfMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class SentSmsDetails {
        
        private long idField;
        
        private string mobileNoField;
        
        private string sendDateTimeField;
        
        private string deliveryStatusField;
        
        private string sMSMessageBodyField;
        
        private bool sendIsErronousField;
        
        private string deliveryStatusFetchErrorField;
        
        private bool needsReCheckField;
        
        private System.Nullable<int> deliveryStateIDField;
        
        /// <remarks/>
        public long ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string MobileNo {
            get {
                return this.mobileNoField;
            }
            set {
                this.mobileNoField = value;
            }
        }
        
        /// <remarks/>
        public string SendDateTime {
            get {
                return this.sendDateTimeField;
            }
            set {
                this.sendDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public string DeliveryStatus {
            get {
                return this.deliveryStatusField;
            }
            set {
                this.deliveryStatusField = value;
            }
        }
        
        /// <remarks/>
        public string SMSMessageBody {
            get {
                return this.sMSMessageBodyField;
            }
            set {
                this.sMSMessageBodyField = value;
            }
        }
        
        /// <remarks/>
        public bool SendIsErronous {
            get {
                return this.sendIsErronousField;
            }
            set {
                this.sendIsErronousField = value;
            }
        }
        
        /// <remarks/>
        public string DeliveryStatusFetchError {
            get {
                return this.deliveryStatusFetchErrorField;
            }
            set {
                this.deliveryStatusFetchErrorField = value;
            }
        }
        
        /// <remarks/>
        public bool NeedsReCheck {
            get {
                return this.needsReCheckField;
            }
            set {
                this.needsReCheckField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> DeliveryStateID {
            get {
                return this.deliveryStateIDField;
            }
            set {
                this.deliveryStateIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class SendToBranchFilterConditions {
        
        private int idField;
        
        private string filterConditionNameField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string FilterConditionName {
            get {
                return this.filterConditionNameField;
            }
            set {
                this.filterConditionNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Branch {
        
        private int idField;
        
        private int parentIDField;
        
        private string branchNameField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int ParentID {
            get {
                return this.parentIDField;
            }
            set {
                this.parentIDField = value;
            }
        }
        
        /// <remarks/>
        public string BranchName {
            get {
                return this.branchNameField;
            }
            set {
                this.branchNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class SendToBranchSendMethod {
        
        private int idField;
        
        private string sendMethodNameField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string SendMethodName {
            get {
                return this.sendMethodNameField;
            }
            set {
                this.sendMethodNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ScheduleSend {
        
        private long idField;
        
        private string sMSMessageBodyField;
        
        private string fromDateField;
        
        private string toDateField;
        
        private int smsLineIDField;
        
        private string lineNumberField;
        
        private string isFlashField;
        
        private string timeField;
        
        private string sMSSendTypeIDField;
        
        private string sMSSendTypeNameField;
        
        /// <remarks/>
        public long ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string SMSMessageBody {
            get {
                return this.sMSMessageBodyField;
            }
            set {
                this.sMSMessageBodyField = value;
            }
        }
        
        /// <remarks/>
        public string FromDate {
            get {
                return this.fromDateField;
            }
            set {
                this.fromDateField = value;
            }
        }
        
        /// <remarks/>
        public string ToDate {
            get {
                return this.toDateField;
            }
            set {
                this.toDateField = value;
            }
        }
        
        /// <remarks/>
        public int SmsLineID {
            get {
                return this.smsLineIDField;
            }
            set {
                this.smsLineIDField = value;
            }
        }
        
        /// <remarks/>
        public string LineNumber {
            get {
                return this.lineNumberField;
            }
            set {
                this.lineNumberField = value;
            }
        }
        
        /// <remarks/>
        public string IsFlash {
            get {
                return this.isFlashField;
            }
            set {
                this.isFlashField = value;
            }
        }
        
        /// <remarks/>
        public string Time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
            }
        }
        
        /// <remarks/>
        public string SMSSendTypeID {
            get {
                return this.sMSSendTypeIDField;
            }
            set {
                this.sMSSendTypeIDField = value;
            }
        }
        
        /// <remarks/>
        public string SMSSendTypeName {
            get {
                return this.sMSSendTypeNameField;
            }
            set {
                this.sMSSendTypeNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class TimeSpan {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SentMessage))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ParentScheduleSend))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ScheduleSend_Weekly))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ScheduleSend_Monthly))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ScheduleSend_Daily))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ParentModel {
        
        private bool isCheckedField;
        
        /// <remarks/>
        public bool IsChecked {
            get {
                return this.isCheckedField;
            }
            set {
                this.isCheckedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class SentMessage : ParentModel {
        
        private long idField;
        
        private string lineNumberField;
        
        private string sMSMessageBodyField;
        
        private string mobileNoField;
        
        private System.Nullable<System.DateTime> sendDateTimeLatinField;
        
        private string toBeSentAtField;
        
        private string nativeDeliveryStatusField;
        
        private string typeOfMessageField;
        
        private string persianSendDateTimeField;
        
        /// <remarks/>
        public long ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string LineNumber {
            get {
                return this.lineNumberField;
            }
            set {
                this.lineNumberField = value;
            }
        }
        
        /// <remarks/>
        public string SMSMessageBody {
            get {
                return this.sMSMessageBodyField;
            }
            set {
                this.sMSMessageBodyField = value;
            }
        }
        
        /// <remarks/>
        public string MobileNo {
            get {
                return this.mobileNoField;
            }
            set {
                this.mobileNoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> SendDateTimeLatin {
            get {
                return this.sendDateTimeLatinField;
            }
            set {
                this.sendDateTimeLatinField = value;
            }
        }
        
        /// <remarks/>
        public string ToBeSentAt {
            get {
                return this.toBeSentAtField;
            }
            set {
                this.toBeSentAtField = value;
            }
        }
        
        /// <remarks/>
        public string NativeDeliveryStatus {
            get {
                return this.nativeDeliveryStatusField;
            }
            set {
                this.nativeDeliveryStatusField = value;
            }
        }
        
        /// <remarks/>
        public string TypeOfMessage {
            get {
                return this.typeOfMessageField;
            }
            set {
                this.typeOfMessageField = value;
            }
        }
        
        /// <remarks/>
        public string PersianSendDateTime {
            get {
                return this.persianSendDateTimeField;
            }
            set {
                this.persianSendDateTimeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ScheduleSend_Weekly))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ScheduleSend_Monthly))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ScheduleSend_Daily))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ParentScheduleSend : ParentModel {
        
        private int smsLineIDField;
        
        private long[] mobileNumbersField;
        
        private SMSSentTypes smsSendTypeField;
        
        private System.DateTime timeField;
        
        private bool isFlashField;
        
        private System.DateTime toDateField;
        
        private System.DateTime fromDateField;
        
        private System.DateTime startDateField;
        
        private System.DateTime endDateField;
        
        private System.DateTime nextTimeToSendField;
        
        private string cronPatternField;
        
        private string titleField;
        
        private int scheduleSendV3_Status_IdField;
        
        private string statusNameField;
        
        private string messageBodyField;
        
        private long idField;
        
        private string sendTypeField;
        
        private TimeSpan fromDate_TimeField;
        
        private TimeSpan toDate_TimeField;
        
        private string fromDate_DateField;
        
        private string toDate_DateField;
        
        /// <remarks/>
        public int SmsLineID {
            get {
                return this.smsLineIDField;
            }
            set {
                this.smsLineIDField = value;
            }
        }
        
        /// <remarks/>
        public long[] MobileNumbers {
            get {
                return this.mobileNumbersField;
            }
            set {
                this.mobileNumbersField = value;
            }
        }
        
        /// <remarks/>
        public SMSSentTypes SmsSendType {
            get {
                return this.smsSendTypeField;
            }
            set {
                this.smsSendTypeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
            }
        }
        
        /// <remarks/>
        public bool IsFlash {
            get {
                return this.isFlashField;
            }
            set {
                this.isFlashField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ToDate {
            get {
                return this.toDateField;
            }
            set {
                this.toDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime FromDate {
            get {
                return this.fromDateField;
            }
            set {
                this.fromDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime NextTimeToSend {
            get {
                return this.nextTimeToSendField;
            }
            set {
                this.nextTimeToSendField = value;
            }
        }
        
        /// <remarks/>
        public string CronPattern {
            get {
                return this.cronPatternField;
            }
            set {
                this.cronPatternField = value;
            }
        }
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public int ScheduleSendV3_Status_Id {
            get {
                return this.scheduleSendV3_Status_IdField;
            }
            set {
                this.scheduleSendV3_Status_IdField = value;
            }
        }
        
        /// <remarks/>
        public string StatusName {
            get {
                return this.statusNameField;
            }
            set {
                this.statusNameField = value;
            }
        }
        
        /// <remarks/>
        public string MessageBody {
            get {
                return this.messageBodyField;
            }
            set {
                this.messageBodyField = value;
            }
        }
        
        /// <remarks/>
        public long Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string SendType {
            get {
                return this.sendTypeField;
            }
            set {
                this.sendTypeField = value;
            }
        }
        
        /// <remarks/>
        public TimeSpan FromDate_Time {
            get {
                return this.fromDate_TimeField;
            }
            set {
                this.fromDate_TimeField = value;
            }
        }
        
        /// <remarks/>
        public TimeSpan ToDate_Time {
            get {
                return this.toDate_TimeField;
            }
            set {
                this.toDate_TimeField = value;
            }
        }
        
        /// <remarks/>
        public string FromDate_Date {
            get {
                return this.fromDate_DateField;
            }
            set {
                this.fromDate_DateField = value;
            }
        }
        
        /// <remarks/>
        public string ToDate_Date {
            get {
                return this.toDate_DateField;
            }
            set {
                this.toDate_DateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum SMSSentTypes {
        
        /// <remarks/>
        AdvertisingReply,
        
        /// <remarks/>
        SMSClerkReply,
        
        /// <remarks/>
        CodeReaderReply,
        
        /// <remarks/>
        MatchReply,
        
        /// <remarks/>
        DivertSMS,
        
        /// <remarks/>
        UserAccountActivationSendSMS,
        
        /// <remarks/>
        UserAccountActivationReceiveSMS,
        
        /// <remarks/>
        ForgottenPasswordSMSSend,
        
        /// <remarks/>
        ParishSMSSend,
        
        /// <remarks/>
        SentToContacts,
        
        /// <remarks/>
        TicketReplySmsSend,
        
        /// <remarks/>
        SingleSMSSend,
        
        /// <remarks/>
        FinancialArticleVerificationSMS,
        
        /// <remarks/>
        CorrespondentSmsSent,
        
        /// <remarks/>
        SingleSMSSendByAdmin,
        
        /// <remarks/>
        SendOnSchedule,
        
        /// <remarks/>
        WebServiceSend,
        
        /// <remarks/>
        SmartSend,
        
        /// <remarks/>
        ContactSend,
        
        /// <remarks/>
        MobileSend,
        
        /// <remarks/>
        PanelExtensionSmsAlert,
        
        /// <remarks/>
        SendOnSchedule_Daily,
        
        /// <remarks/>
        SendOnSchedule_Weekly,
        
        /// <remarks/>
        SendOnSchedule_Monthly,
        
        /// <remarks/>
        SendOnSchedule_EveryNDays,
        
        /// <remarks/>
        UrlSend,
        
        /// <remarks/>
        SendSms2Map,
        
        /// <remarks/>
        ContactCustomerClubSend,
        
        /// <remarks/>
        SendSmsCustomerClub,
        
        /// <remarks/>
        Windows_ServiceAutomaticSend,
        
        /// <remarks/>
        InsufficientChargeAccountSend,
        
        /// <remarks/>
        FinancialArticleRegistrationSMS,
        
        /// <remarks/>
        CreateTicketSmsSend,
        
        /// <remarks/>
        DiscountCodeSend,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ScheduleSend_Weekly : ParentScheduleSend {
        
        private bool saturdayField;
        
        private bool sundayField;
        
        private bool mondayField;
        
        private bool tuesdayField;
        
        private bool wednsdayField;
        
        private bool thursdayField;
        
        private bool fridayField;
        
        /// <remarks/>
        public bool Saturday {
            get {
                return this.saturdayField;
            }
            set {
                this.saturdayField = value;
            }
        }
        
        /// <remarks/>
        public bool Sunday {
            get {
                return this.sundayField;
            }
            set {
                this.sundayField = value;
            }
        }
        
        /// <remarks/>
        public bool Monday {
            get {
                return this.mondayField;
            }
            set {
                this.mondayField = value;
            }
        }
        
        /// <remarks/>
        public bool Tuesday {
            get {
                return this.tuesdayField;
            }
            set {
                this.tuesdayField = value;
            }
        }
        
        /// <remarks/>
        public bool Wednsday {
            get {
                return this.wednsdayField;
            }
            set {
                this.wednsdayField = value;
            }
        }
        
        /// <remarks/>
        public bool Thursday {
            get {
                return this.thursdayField;
            }
            set {
                this.thursdayField = value;
            }
        }
        
        /// <remarks/>
        public bool Friday {
            get {
                return this.fridayField;
            }
            set {
                this.fridayField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ScheduleSend_Monthly : ParentScheduleSend {
        
        private int dayOfMonthField;
        
        private bool month01Field;
        
        private bool month02Field;
        
        private bool month03Field;
        
        private bool month04Field;
        
        private bool month05Field;
        
        private bool month06Field;
        
        private bool month07Field;
        
        private bool month08Field;
        
        private bool month09Field;
        
        private bool month10Field;
        
        private bool month11Field;
        
        private bool month12Field;
        
        /// <remarks/>
        public int DayOfMonth {
            get {
                return this.dayOfMonthField;
            }
            set {
                this.dayOfMonthField = value;
            }
        }
        
        /// <remarks/>
        public bool Month01 {
            get {
                return this.month01Field;
            }
            set {
                this.month01Field = value;
            }
        }
        
        /// <remarks/>
        public bool Month02 {
            get {
                return this.month02Field;
            }
            set {
                this.month02Field = value;
            }
        }
        
        /// <remarks/>
        public bool Month03 {
            get {
                return this.month03Field;
            }
            set {
                this.month03Field = value;
            }
        }
        
        /// <remarks/>
        public bool Month04 {
            get {
                return this.month04Field;
            }
            set {
                this.month04Field = value;
            }
        }
        
        /// <remarks/>
        public bool Month05 {
            get {
                return this.month05Field;
            }
            set {
                this.month05Field = value;
            }
        }
        
        /// <remarks/>
        public bool Month06 {
            get {
                return this.month06Field;
            }
            set {
                this.month06Field = value;
            }
        }
        
        /// <remarks/>
        public bool Month07 {
            get {
                return this.month07Field;
            }
            set {
                this.month07Field = value;
            }
        }
        
        /// <remarks/>
        public bool Month08 {
            get {
                return this.month08Field;
            }
            set {
                this.month08Field = value;
            }
        }
        
        /// <remarks/>
        public bool Month09 {
            get {
                return this.month09Field;
            }
            set {
                this.month09Field = value;
            }
        }
        
        /// <remarks/>
        public bool Month10 {
            get {
                return this.month10Field;
            }
            set {
                this.month10Field = value;
            }
        }
        
        /// <remarks/>
        public bool Month11 {
            get {
                return this.month11Field;
            }
            set {
                this.month11Field = value;
            }
        }
        
        /// <remarks/>
        public bool Month12 {
            get {
                return this.month12Field;
            }
            set {
                this.month12Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2556.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ScheduleSend_Daily : ParentScheduleSend {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetSMSLinesCompletedEventHandler(object sender, GetSMSLinesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSMSLinesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSMSLinesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SMSLineNumber[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SMSLineNumber[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SaveNewSchedulSendSms_DailyCompletedEventHandler(object sender, SaveNewSchedulSendSms_DailyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveNewSchedulSendSms_DailyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveNewSchedulSendSms_DailyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetListOfScheduleSendsCompletedEventHandler(object sender, GetListOfScheduleSendsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListOfScheduleSendsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListOfScheduleSendsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ScheduleSend[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ScheduleSend[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SaveNewSchedulSendSms_MonthlyCompletedEventHandler(object sender, SaveNewSchedulSendSms_MonthlyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveNewSchedulSendSms_MonthlyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveNewSchedulSendSms_MonthlyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetSendToBranchesSendMethodsCompletedEventHandler(object sender, GetSendToBranchesSendMethodsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSendToBranchesSendMethodsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSendToBranchesSendMethodsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SendToBranchSendMethod[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SendToBranchSendMethod[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetBranchesCompletedEventHandler(object sender, GetBranchesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBranchesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBranchesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Branch[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Branch[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetSendToBranchFilterConditionsCompletedEventHandler(object sender, GetSendToBranchFilterConditionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSendToBranchFilterConditionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSendToBranchFilterConditionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SendToBranchFilterConditions[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SendToBranchFilterConditions[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SendToParishCompletedEventHandler(object sender, SendToParishCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendToParishCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendToParishCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SendToParishWithBatchkeyCompletedEventHandler(object sender, SendToParishWithBatchkeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendToParishWithBatchkeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendToParishWithBatchkeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Guid batchkey {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SaveNewSchedulSendSms_WeeklyCompletedEventHandler(object sender, SaveNewSchedulSendSms_WeeklyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveNewSchedulSendSms_WeeklyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveNewSchedulSendSms_WeeklyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void DeleteSchedulSendSmsCompletedEventHandler(object sender, DeleteSchedulSendSmsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteSchedulSendSmsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteSchedulSendSmsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetSentMessageStatusCompletedEventHandler(object sender, GetSentMessageStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSentMessageStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSentMessageStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SentSmsDetails[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SentSmsDetails[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int countOfAll {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetSentMessageStatusByIDCompletedEventHandler(object sender, GetSentMessageStatusByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSentMessageStatusByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSentMessageStatusByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SentSmsDetails Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SentSmsDetails)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetSentMessagesCompletedEventHandler(object sender, GetSentMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSentMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSentMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SentMessage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SentMessage[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetReceivedMessageByLastMessageIDCompletedEventHandler(object sender, GetReceivedMessageByLastMessageIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReceivedMessageByLastMessageIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReceivedMessageByLastMessageIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ReceivedMessage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ReceivedMessage[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetReceivedMessageByLastMessageIDAndLineNumberCompletedEventHandler(object sender, GetReceivedMessageByLastMessageIDAndLineNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReceivedMessageByLastMessageIDAndLineNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReceivedMessageByLastMessageIDAndLineNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ReceivedMessage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ReceivedMessage[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetReceivedMessagesCompletedEventHandler(object sender, GetReceivedMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReceivedMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReceivedMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ReceivedMessage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ReceivedMessage[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetAllMessagesCompletedEventHandler(object sender, GetAllMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AllMessage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AllMessage[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetTrashedMessagesCompletedEventHandler(object sender, GetTrashedMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTrashedMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTrashedMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TrashedMessage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TrashedMessage[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetCurrentDateCompletedEventHandler(object sender, GetCurrentDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCurrentDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCurrentDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.DateTime Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetUserCreditCompletedEventHandler(object sender, GetUserCreditCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserCreditCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserCreditCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Nullable<double> Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Nullable<double>)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetDefualtLineNumberCompletedEventHandler(object sender, GetDefualtLineNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDefualtLineNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDefualtLineNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Nullable<int> Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Nullable<int>)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SendMessageCustomerClubCompletedEventHandler(object sender, SendMessageCustomerClubCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageCustomerClubCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageCustomerClubCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SendMessageToOneCustomerClubCompletedEventHandler(object sender, SendMessageToOneCustomerClubCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageToOneCustomerClubCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageToOneCustomerClubCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SendBulkMessageToCustomersClubCompletedEventHandler(object sender, SendBulkMessageToCustomersClubCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendBulkMessageToCustomersClubCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendBulkMessageToCustomersClubCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SendMessageToCustomersClubCategoriesCompletedEventHandler(object sender, SendMessageToCustomersClubCategoriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageToCustomersClubCategoriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageToCustomersClubCategoriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SendMessageToCustomersClubCategoryCompletedEventHandler(object sender, SendMessageToCustomersClubCategoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageToCustomersClubCategoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageToCustomersClubCategoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void VipSendMessagesCompletedEventHandler(object sender, VipSendMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VipSendMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VipSendMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void VipSendMessageWithBachKeyCompletedEventHandler(object sender, VipSendMessageWithBachKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VipSendMessageWithBachKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VipSendMessageWithBachKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Guid batchKey {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetVipSentMessagesCompletedEventHandler(object sender, GetVipSentMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVipSentMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVipSentMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SentMessage[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SentMessage[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetVipSentMessageStatusByIDCompletedEventHandler(object sender, GetVipSentMessageStatusByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVipSentMessageStatusByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVipSentMessageStatusByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SentSmsDetails Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SentSmsDetails)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetVipSentMessageStatusByIDWithDateCompletedEventHandler(object sender, GetVipSentMessageStatusByIDWithDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVipSentMessageStatusByIDWithDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVipSentMessageStatusByIDWithDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SentSmsDetails Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SentSmsDetails)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void GetVipSentMessageStatusCompletedEventHandler(object sender, GetVipSentMessageStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVipSentMessageStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVipSentMessageStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SentSmsDetails[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SentSmsDetails[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int countOfAll {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void VipSendMessageWithLineNumberCompletedEventHandler(object sender, VipSendMessageWithLineNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VipSendMessageWithLineNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VipSendMessageWithLineNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void VipSendMessageWithLineNumberAndBatchKeyCompletedEventHandler(object sender, VipSendMessageWithLineNumberAndBatchKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VipSendMessageWithLineNumberAndBatchKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VipSendMessageWithLineNumberAndBatchKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Guid batchKey {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SaveVIP_SendCorespondentMessageCompletedEventHandler(object sender, SaveVIP_SendCorespondentMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveVIP_SendCorespondentMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveVIP_SendCorespondentMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void WindowsService_SendAutomaticSMSCompletedEventHandler(object sender, WindowsService_SendAutomaticSMSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WindowsService_SendAutomaticSMSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WindowsService_SendAutomaticSMSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SendMessageWithLineNumberCompletedEventHandler(object sender, SendMessageWithLineNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageWithLineNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageWithLineNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SendBulkMessageWithLineNumberCompletedEventHandler(object sender, SendBulkMessageWithLineNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendBulkMessageWithLineNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendBulkMessageWithLineNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SendBulkMessageWithLineNumberAndBatchKeyCompletedEventHandler(object sender, SendBulkMessageWithLineNumberAndBatchKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendBulkMessageWithLineNumberAndBatchKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendBulkMessageWithLineNumberAndBatchKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Guid batchKey {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SendMessageWithLineNumberAndBatchKeyCompletedEventHandler(object sender, SendMessageWithLineNumberAndBatchKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageWithLineNumberAndBatchKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageWithLineNumberAndBatchKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Guid batchKey {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SendMessageCompletedEventHandler(object sender, SendMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SendMessageWithBachKeyCompletedEventHandler(object sender, SendMessageWithBachKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageWithBachKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageWithBachKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Guid batchKey {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SendSmartCompletedEventHandler(object sender, SendSmartCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendSmartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSmartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SendSmartMadiranCompletedEventHandler(object sender, SendSmartMadiranCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendSmartMadiranCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendSmartMadiranCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void SaveReceiveMessagesCompletedEventHandler(object sender, SaveReceiveMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveReceiveMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveReceiveMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591